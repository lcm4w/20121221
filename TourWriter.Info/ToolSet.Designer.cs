//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace TourWriter.Info {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ToolSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ToolSet : global::System.Data.DataSet {
        
        private ServiceTypeDataTable tableServiceType;
        
        private GradeDataTable tableGrade;
        
        private GradeExternalDataTable tableGradeExternal;
        
        private CreditCardDataTable tableCreditCard;
        
        private CountryDataTable tableCountry;
        
        private StateDataTable tableState;
        
        private RegionDataTable tableRegion;
        
        private CityDataTable tableCity;
        
        private ServiceConfigTypeDataTable tableServiceConfigType;
        
        private AgeGroupDataTable tableAgeGroup;
        
        private ItineraryStatusDataTable tableItineraryStatus;
        
        private RequestStatusDataTable tableRequestStatus;
        
        private UserDataTable tableUser;
        
        private BranchDataTable tableBranch;
        
        private DepartmentDataTable tableDepartment;
        
        private ItinerarySourceDataTable tableItinerarySource;
        
        private AppSettingsDataTable tableAppSettings;
        
        private AgentDataTable tableAgent;
        
        private SupplierConfigTypeDataTable tableSupplierConfigType;
        
        private MenuTypeDataTable tableMenuType;
        
        private PaymentTypeDataTable tablePaymentType;
        
        private CurrencyDataTable tableCurrency;
        
        private TaxTypeDataTable tableTaxType;
        
        private PaymentDueDataTable tablePaymentDue;
        
        private AccountingCategoryDataTable tableAccountingCategory;
        
        private ContactCategoryDataTable tableContactCategory;
        
        private OptionTypeDataTable tableOptionType;
        
        private FlagDataTable tableFlag;
        
        private TemplateCategoryDataTable tableTemplateCategory;
        
        private TemplateDataTable tableTemplate;
        
        private CurrencyRateDataTable tableCurrencyRate;
        
        private global::System.Data.DataRelation relationCountryState;
        
        private global::System.Data.DataRelation relationStateRegion;
        
        private global::System.Data.DataRelation relationRegionCity;
        
        private global::System.Data.DataRelation relationServiceTypeServiceConfigType;
        
        private global::System.Data.DataRelation relationTemplateCategory_Template;
        
        private global::System.Data.DataRelation relationCurrencyCurrencyRateFrom;
        
        private global::System.Data.DataRelation relationCurrencyCurrencyRateTo;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ToolSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ToolSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ServiceType"] != null)) {
                    base.Tables.Add(new ServiceTypeDataTable(ds.Tables["ServiceType"]));
                }
                if ((ds.Tables["Grade"] != null)) {
                    base.Tables.Add(new GradeDataTable(ds.Tables["Grade"]));
                }
                if ((ds.Tables["GradeExternal"] != null)) {
                    base.Tables.Add(new GradeExternalDataTable(ds.Tables["GradeExternal"]));
                }
                if ((ds.Tables["CreditCard"] != null)) {
                    base.Tables.Add(new CreditCardDataTable(ds.Tables["CreditCard"]));
                }
                if ((ds.Tables["Country"] != null)) {
                    base.Tables.Add(new CountryDataTable(ds.Tables["Country"]));
                }
                if ((ds.Tables["State"] != null)) {
                    base.Tables.Add(new StateDataTable(ds.Tables["State"]));
                }
                if ((ds.Tables["Region"] != null)) {
                    base.Tables.Add(new RegionDataTable(ds.Tables["Region"]));
                }
                if ((ds.Tables["City"] != null)) {
                    base.Tables.Add(new CityDataTable(ds.Tables["City"]));
                }
                if ((ds.Tables["ServiceConfigType"] != null)) {
                    base.Tables.Add(new ServiceConfigTypeDataTable(ds.Tables["ServiceConfigType"]));
                }
                if ((ds.Tables["AgeGroup"] != null)) {
                    base.Tables.Add(new AgeGroupDataTable(ds.Tables["AgeGroup"]));
                }
                if ((ds.Tables["ItineraryStatus"] != null)) {
                    base.Tables.Add(new ItineraryStatusDataTable(ds.Tables["ItineraryStatus"]));
                }
                if ((ds.Tables["RequestStatus"] != null)) {
                    base.Tables.Add(new RequestStatusDataTable(ds.Tables["RequestStatus"]));
                }
                if ((ds.Tables["User"] != null)) {
                    base.Tables.Add(new UserDataTable(ds.Tables["User"]));
                }
                if ((ds.Tables["Branch"] != null)) {
                    base.Tables.Add(new BranchDataTable(ds.Tables["Branch"]));
                }
                if ((ds.Tables["Department"] != null)) {
                    base.Tables.Add(new DepartmentDataTable(ds.Tables["Department"]));
                }
                if ((ds.Tables["ItinerarySource"] != null)) {
                    base.Tables.Add(new ItinerarySourceDataTable(ds.Tables["ItinerarySource"]));
                }
                if ((ds.Tables["AppSettings"] != null)) {
                    base.Tables.Add(new AppSettingsDataTable(ds.Tables["AppSettings"]));
                }
                if ((ds.Tables["Agent"] != null)) {
                    base.Tables.Add(new AgentDataTable(ds.Tables["Agent"]));
                }
                if ((ds.Tables["SupplierConfigType"] != null)) {
                    base.Tables.Add(new SupplierConfigTypeDataTable(ds.Tables["SupplierConfigType"]));
                }
                if ((ds.Tables["MenuType"] != null)) {
                    base.Tables.Add(new MenuTypeDataTable(ds.Tables["MenuType"]));
                }
                if ((ds.Tables["PaymentType"] != null)) {
                    base.Tables.Add(new PaymentTypeDataTable(ds.Tables["PaymentType"]));
                }
                if ((ds.Tables["Currency"] != null)) {
                    base.Tables.Add(new CurrencyDataTable(ds.Tables["Currency"]));
                }
                if ((ds.Tables["TaxType"] != null)) {
                    base.Tables.Add(new TaxTypeDataTable(ds.Tables["TaxType"]));
                }
                if ((ds.Tables["PaymentDue"] != null)) {
                    base.Tables.Add(new PaymentDueDataTable(ds.Tables["PaymentDue"]));
                }
                if ((ds.Tables["AccountingCategory"] != null)) {
                    base.Tables.Add(new AccountingCategoryDataTable(ds.Tables["AccountingCategory"]));
                }
                if ((ds.Tables["ContactCategory"] != null)) {
                    base.Tables.Add(new ContactCategoryDataTable(ds.Tables["ContactCategory"]));
                }
                if ((ds.Tables["OptionType"] != null)) {
                    base.Tables.Add(new OptionTypeDataTable(ds.Tables["OptionType"]));
                }
                if ((ds.Tables["Flag"] != null)) {
                    base.Tables.Add(new FlagDataTable(ds.Tables["Flag"]));
                }
                if ((ds.Tables["TemplateCategory"] != null)) {
                    base.Tables.Add(new TemplateCategoryDataTable(ds.Tables["TemplateCategory"]));
                }
                if ((ds.Tables["Template"] != null)) {
                    base.Tables.Add(new TemplateDataTable(ds.Tables["Template"]));
                }
                if ((ds.Tables["CurrencyRate"] != null)) {
                    base.Tables.Add(new CurrencyRateDataTable(ds.Tables["CurrencyRate"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServiceTypeDataTable ServiceType {
            get {
                return this.tableServiceType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GradeDataTable Grade {
            get {
                return this.tableGrade;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public GradeExternalDataTable GradeExternal {
            get {
                return this.tableGradeExternal;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CreditCardDataTable CreditCard {
            get {
                return this.tableCreditCard;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CountryDataTable Country {
            get {
                return this.tableCountry;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public StateDataTable State {
            get {
                return this.tableState;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RegionDataTable Region {
            get {
                return this.tableRegion;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CityDataTable City {
            get {
                return this.tableCity;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ServiceConfigTypeDataTable ServiceConfigType {
            get {
                return this.tableServiceConfigType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AgeGroupDataTable AgeGroup {
            get {
                return this.tableAgeGroup;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ItineraryStatusDataTable ItineraryStatus {
            get {
                return this.tableItineraryStatus;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RequestStatusDataTable RequestStatus {
            get {
                return this.tableRequestStatus;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserDataTable User {
            get {
                return this.tableUser;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public BranchDataTable Branch {
            get {
                return this.tableBranch;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DepartmentDataTable Department {
            get {
                return this.tableDepartment;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ItinerarySourceDataTable ItinerarySource {
            get {
                return this.tableItinerarySource;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AppSettingsDataTable AppSettings {
            get {
                return this.tableAppSettings;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AgentDataTable Agent {
            get {
                return this.tableAgent;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SupplierConfigTypeDataTable SupplierConfigType {
            get {
                return this.tableSupplierConfigType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MenuTypeDataTable MenuType {
            get {
                return this.tableMenuType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PaymentTypeDataTable PaymentType {
            get {
                return this.tablePaymentType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CurrencyDataTable Currency {
            get {
                return this.tableCurrency;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TaxTypeDataTable TaxType {
            get {
                return this.tableTaxType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PaymentDueDataTable PaymentDue {
            get {
                return this.tablePaymentDue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AccountingCategoryDataTable AccountingCategory {
            get {
                return this.tableAccountingCategory;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ContactCategoryDataTable ContactCategory {
            get {
                return this.tableContactCategory;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public OptionTypeDataTable OptionType {
            get {
                return this.tableOptionType;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public FlagDataTable Flag {
            get {
                return this.tableFlag;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TemplateCategoryDataTable TemplateCategory {
            get {
                return this.tableTemplateCategory;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TemplateDataTable Template {
            get {
                return this.tableTemplate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CurrencyRateDataTable CurrencyRate {
            get {
                return this.tableCurrencyRate;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ToolSet cln = ((ToolSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ServiceType"] != null)) {
                    base.Tables.Add(new ServiceTypeDataTable(ds.Tables["ServiceType"]));
                }
                if ((ds.Tables["Grade"] != null)) {
                    base.Tables.Add(new GradeDataTable(ds.Tables["Grade"]));
                }
                if ((ds.Tables["GradeExternal"] != null)) {
                    base.Tables.Add(new GradeExternalDataTable(ds.Tables["GradeExternal"]));
                }
                if ((ds.Tables["CreditCard"] != null)) {
                    base.Tables.Add(new CreditCardDataTable(ds.Tables["CreditCard"]));
                }
                if ((ds.Tables["Country"] != null)) {
                    base.Tables.Add(new CountryDataTable(ds.Tables["Country"]));
                }
                if ((ds.Tables["State"] != null)) {
                    base.Tables.Add(new StateDataTable(ds.Tables["State"]));
                }
                if ((ds.Tables["Region"] != null)) {
                    base.Tables.Add(new RegionDataTable(ds.Tables["Region"]));
                }
                if ((ds.Tables["City"] != null)) {
                    base.Tables.Add(new CityDataTable(ds.Tables["City"]));
                }
                if ((ds.Tables["ServiceConfigType"] != null)) {
                    base.Tables.Add(new ServiceConfigTypeDataTable(ds.Tables["ServiceConfigType"]));
                }
                if ((ds.Tables["AgeGroup"] != null)) {
                    base.Tables.Add(new AgeGroupDataTable(ds.Tables["AgeGroup"]));
                }
                if ((ds.Tables["ItineraryStatus"] != null)) {
                    base.Tables.Add(new ItineraryStatusDataTable(ds.Tables["ItineraryStatus"]));
                }
                if ((ds.Tables["RequestStatus"] != null)) {
                    base.Tables.Add(new RequestStatusDataTable(ds.Tables["RequestStatus"]));
                }
                if ((ds.Tables["User"] != null)) {
                    base.Tables.Add(new UserDataTable(ds.Tables["User"]));
                }
                if ((ds.Tables["Branch"] != null)) {
                    base.Tables.Add(new BranchDataTable(ds.Tables["Branch"]));
                }
                if ((ds.Tables["Department"] != null)) {
                    base.Tables.Add(new DepartmentDataTable(ds.Tables["Department"]));
                }
                if ((ds.Tables["ItinerarySource"] != null)) {
                    base.Tables.Add(new ItinerarySourceDataTable(ds.Tables["ItinerarySource"]));
                }
                if ((ds.Tables["AppSettings"] != null)) {
                    base.Tables.Add(new AppSettingsDataTable(ds.Tables["AppSettings"]));
                }
                if ((ds.Tables["Agent"] != null)) {
                    base.Tables.Add(new AgentDataTable(ds.Tables["Agent"]));
                }
                if ((ds.Tables["SupplierConfigType"] != null)) {
                    base.Tables.Add(new SupplierConfigTypeDataTable(ds.Tables["SupplierConfigType"]));
                }
                if ((ds.Tables["MenuType"] != null)) {
                    base.Tables.Add(new MenuTypeDataTable(ds.Tables["MenuType"]));
                }
                if ((ds.Tables["PaymentType"] != null)) {
                    base.Tables.Add(new PaymentTypeDataTable(ds.Tables["PaymentType"]));
                }
                if ((ds.Tables["Currency"] != null)) {
                    base.Tables.Add(new CurrencyDataTable(ds.Tables["Currency"]));
                }
                if ((ds.Tables["TaxType"] != null)) {
                    base.Tables.Add(new TaxTypeDataTable(ds.Tables["TaxType"]));
                }
                if ((ds.Tables["PaymentDue"] != null)) {
                    base.Tables.Add(new PaymentDueDataTable(ds.Tables["PaymentDue"]));
                }
                if ((ds.Tables["AccountingCategory"] != null)) {
                    base.Tables.Add(new AccountingCategoryDataTable(ds.Tables["AccountingCategory"]));
                }
                if ((ds.Tables["ContactCategory"] != null)) {
                    base.Tables.Add(new ContactCategoryDataTable(ds.Tables["ContactCategory"]));
                }
                if ((ds.Tables["OptionType"] != null)) {
                    base.Tables.Add(new OptionTypeDataTable(ds.Tables["OptionType"]));
                }
                if ((ds.Tables["Flag"] != null)) {
                    base.Tables.Add(new FlagDataTable(ds.Tables["Flag"]));
                }
                if ((ds.Tables["TemplateCategory"] != null)) {
                    base.Tables.Add(new TemplateCategoryDataTable(ds.Tables["TemplateCategory"]));
                }
                if ((ds.Tables["Template"] != null)) {
                    base.Tables.Add(new TemplateDataTable(ds.Tables["Template"]));
                }
                if ((ds.Tables["CurrencyRate"] != null)) {
                    base.Tables.Add(new CurrencyRateDataTable(ds.Tables["CurrencyRate"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableServiceType = ((ServiceTypeDataTable)(base.Tables["ServiceType"]));
            if ((initTable == true)) {
                if ((this.tableServiceType != null)) {
                    this.tableServiceType.InitVars();
                }
            }
            this.tableGrade = ((GradeDataTable)(base.Tables["Grade"]));
            if ((initTable == true)) {
                if ((this.tableGrade != null)) {
                    this.tableGrade.InitVars();
                }
            }
            this.tableGradeExternal = ((GradeExternalDataTable)(base.Tables["GradeExternal"]));
            if ((initTable == true)) {
                if ((this.tableGradeExternal != null)) {
                    this.tableGradeExternal.InitVars();
                }
            }
            this.tableCreditCard = ((CreditCardDataTable)(base.Tables["CreditCard"]));
            if ((initTable == true)) {
                if ((this.tableCreditCard != null)) {
                    this.tableCreditCard.InitVars();
                }
            }
            this.tableCountry = ((CountryDataTable)(base.Tables["Country"]));
            if ((initTable == true)) {
                if ((this.tableCountry != null)) {
                    this.tableCountry.InitVars();
                }
            }
            this.tableState = ((StateDataTable)(base.Tables["State"]));
            if ((initTable == true)) {
                if ((this.tableState != null)) {
                    this.tableState.InitVars();
                }
            }
            this.tableRegion = ((RegionDataTable)(base.Tables["Region"]));
            if ((initTable == true)) {
                if ((this.tableRegion != null)) {
                    this.tableRegion.InitVars();
                }
            }
            this.tableCity = ((CityDataTable)(base.Tables["City"]));
            if ((initTable == true)) {
                if ((this.tableCity != null)) {
                    this.tableCity.InitVars();
                }
            }
            this.tableServiceConfigType = ((ServiceConfigTypeDataTable)(base.Tables["ServiceConfigType"]));
            if ((initTable == true)) {
                if ((this.tableServiceConfigType != null)) {
                    this.tableServiceConfigType.InitVars();
                }
            }
            this.tableAgeGroup = ((AgeGroupDataTable)(base.Tables["AgeGroup"]));
            if ((initTable == true)) {
                if ((this.tableAgeGroup != null)) {
                    this.tableAgeGroup.InitVars();
                }
            }
            this.tableItineraryStatus = ((ItineraryStatusDataTable)(base.Tables["ItineraryStatus"]));
            if ((initTable == true)) {
                if ((this.tableItineraryStatus != null)) {
                    this.tableItineraryStatus.InitVars();
                }
            }
            this.tableRequestStatus = ((RequestStatusDataTable)(base.Tables["RequestStatus"]));
            if ((initTable == true)) {
                if ((this.tableRequestStatus != null)) {
                    this.tableRequestStatus.InitVars();
                }
            }
            this.tableUser = ((UserDataTable)(base.Tables["User"]));
            if ((initTable == true)) {
                if ((this.tableUser != null)) {
                    this.tableUser.InitVars();
                }
            }
            this.tableBranch = ((BranchDataTable)(base.Tables["Branch"]));
            if ((initTable == true)) {
                if ((this.tableBranch != null)) {
                    this.tableBranch.InitVars();
                }
            }
            this.tableDepartment = ((DepartmentDataTable)(base.Tables["Department"]));
            if ((initTable == true)) {
                if ((this.tableDepartment != null)) {
                    this.tableDepartment.InitVars();
                }
            }
            this.tableItinerarySource = ((ItinerarySourceDataTable)(base.Tables["ItinerarySource"]));
            if ((initTable == true)) {
                if ((this.tableItinerarySource != null)) {
                    this.tableItinerarySource.InitVars();
                }
            }
            this.tableAppSettings = ((AppSettingsDataTable)(base.Tables["AppSettings"]));
            if ((initTable == true)) {
                if ((this.tableAppSettings != null)) {
                    this.tableAppSettings.InitVars();
                }
            }
            this.tableAgent = ((AgentDataTable)(base.Tables["Agent"]));
            if ((initTable == true)) {
                if ((this.tableAgent != null)) {
                    this.tableAgent.InitVars();
                }
            }
            this.tableSupplierConfigType = ((SupplierConfigTypeDataTable)(base.Tables["SupplierConfigType"]));
            if ((initTable == true)) {
                if ((this.tableSupplierConfigType != null)) {
                    this.tableSupplierConfigType.InitVars();
                }
            }
            this.tableMenuType = ((MenuTypeDataTable)(base.Tables["MenuType"]));
            if ((initTable == true)) {
                if ((this.tableMenuType != null)) {
                    this.tableMenuType.InitVars();
                }
            }
            this.tablePaymentType = ((PaymentTypeDataTable)(base.Tables["PaymentType"]));
            if ((initTable == true)) {
                if ((this.tablePaymentType != null)) {
                    this.tablePaymentType.InitVars();
                }
            }
            this.tableCurrency = ((CurrencyDataTable)(base.Tables["Currency"]));
            if ((initTable == true)) {
                if ((this.tableCurrency != null)) {
                    this.tableCurrency.InitVars();
                }
            }
            this.tableTaxType = ((TaxTypeDataTable)(base.Tables["TaxType"]));
            if ((initTable == true)) {
                if ((this.tableTaxType != null)) {
                    this.tableTaxType.InitVars();
                }
            }
            this.tablePaymentDue = ((PaymentDueDataTable)(base.Tables["PaymentDue"]));
            if ((initTable == true)) {
                if ((this.tablePaymentDue != null)) {
                    this.tablePaymentDue.InitVars();
                }
            }
            this.tableAccountingCategory = ((AccountingCategoryDataTable)(base.Tables["AccountingCategory"]));
            if ((initTable == true)) {
                if ((this.tableAccountingCategory != null)) {
                    this.tableAccountingCategory.InitVars();
                }
            }
            this.tableContactCategory = ((ContactCategoryDataTable)(base.Tables["ContactCategory"]));
            if ((initTable == true)) {
                if ((this.tableContactCategory != null)) {
                    this.tableContactCategory.InitVars();
                }
            }
            this.tableOptionType = ((OptionTypeDataTable)(base.Tables["OptionType"]));
            if ((initTable == true)) {
                if ((this.tableOptionType != null)) {
                    this.tableOptionType.InitVars();
                }
            }
            this.tableFlag = ((FlagDataTable)(base.Tables["Flag"]));
            if ((initTable == true)) {
                if ((this.tableFlag != null)) {
                    this.tableFlag.InitVars();
                }
            }
            this.tableTemplateCategory = ((TemplateCategoryDataTable)(base.Tables["TemplateCategory"]));
            if ((initTable == true)) {
                if ((this.tableTemplateCategory != null)) {
                    this.tableTemplateCategory.InitVars();
                }
            }
            this.tableTemplate = ((TemplateDataTable)(base.Tables["Template"]));
            if ((initTable == true)) {
                if ((this.tableTemplate != null)) {
                    this.tableTemplate.InitVars();
                }
            }
            this.tableCurrencyRate = ((CurrencyRateDataTable)(base.Tables["CurrencyRate"]));
            if ((initTable == true)) {
                if ((this.tableCurrencyRate != null)) {
                    this.tableCurrencyRate.InitVars();
                }
            }
            this.relationCountryState = this.Relations["CountryState"];
            this.relationStateRegion = this.Relations["StateRegion"];
            this.relationRegionCity = this.Relations["RegionCity"];
            this.relationServiceTypeServiceConfigType = this.Relations["ServiceTypeServiceConfigType"];
            this.relationTemplateCategory_Template = this.Relations["TemplateCategory_Template"];
            this.relationCurrencyCurrencyRateFrom = this.Relations["CurrencyCurrencyRateFrom"];
            this.relationCurrencyCurrencyRateTo = this.Relations["CurrencyCurrencyRateTo"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ToolSet";
            this.Prefix = "";
            this.Namespace = "http://tourwriter.com/ToolSetBase.xsd";
            this.Locale = new global::System.Globalization.CultureInfo("en-US");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableServiceType = new ServiceTypeDataTable();
            base.Tables.Add(this.tableServiceType);
            this.tableGrade = new GradeDataTable();
            base.Tables.Add(this.tableGrade);
            this.tableGradeExternal = new GradeExternalDataTable();
            base.Tables.Add(this.tableGradeExternal);
            this.tableCreditCard = new CreditCardDataTable();
            base.Tables.Add(this.tableCreditCard);
            this.tableCountry = new CountryDataTable();
            base.Tables.Add(this.tableCountry);
            this.tableState = new StateDataTable();
            base.Tables.Add(this.tableState);
            this.tableRegion = new RegionDataTable();
            base.Tables.Add(this.tableRegion);
            this.tableCity = new CityDataTable();
            base.Tables.Add(this.tableCity);
            this.tableServiceConfigType = new ServiceConfigTypeDataTable();
            base.Tables.Add(this.tableServiceConfigType);
            this.tableAgeGroup = new AgeGroupDataTable();
            base.Tables.Add(this.tableAgeGroup);
            this.tableItineraryStatus = new ItineraryStatusDataTable();
            base.Tables.Add(this.tableItineraryStatus);
            this.tableRequestStatus = new RequestStatusDataTable();
            base.Tables.Add(this.tableRequestStatus);
            this.tableUser = new UserDataTable();
            base.Tables.Add(this.tableUser);
            this.tableBranch = new BranchDataTable();
            base.Tables.Add(this.tableBranch);
            this.tableDepartment = new DepartmentDataTable();
            base.Tables.Add(this.tableDepartment);
            this.tableItinerarySource = new ItinerarySourceDataTable();
            base.Tables.Add(this.tableItinerarySource);
            this.tableAppSettings = new AppSettingsDataTable();
            base.Tables.Add(this.tableAppSettings);
            this.tableAgent = new AgentDataTable();
            base.Tables.Add(this.tableAgent);
            this.tableSupplierConfigType = new SupplierConfigTypeDataTable();
            base.Tables.Add(this.tableSupplierConfigType);
            this.tableMenuType = new MenuTypeDataTable();
            base.Tables.Add(this.tableMenuType);
            this.tablePaymentType = new PaymentTypeDataTable();
            base.Tables.Add(this.tablePaymentType);
            this.tableCurrency = new CurrencyDataTable();
            base.Tables.Add(this.tableCurrency);
            this.tableTaxType = new TaxTypeDataTable();
            base.Tables.Add(this.tableTaxType);
            this.tablePaymentDue = new PaymentDueDataTable();
            base.Tables.Add(this.tablePaymentDue);
            this.tableAccountingCategory = new AccountingCategoryDataTable();
            base.Tables.Add(this.tableAccountingCategory);
            this.tableContactCategory = new ContactCategoryDataTable();
            base.Tables.Add(this.tableContactCategory);
            this.tableOptionType = new OptionTypeDataTable();
            base.Tables.Add(this.tableOptionType);
            this.tableFlag = new FlagDataTable();
            base.Tables.Add(this.tableFlag);
            this.tableTemplateCategory = new TemplateCategoryDataTable();
            base.Tables.Add(this.tableTemplateCategory);
            this.tableTemplate = new TemplateDataTable();
            base.Tables.Add(this.tableTemplate);
            this.tableCurrencyRate = new CurrencyRateDataTable();
            base.Tables.Add(this.tableCurrencyRate);
            global::System.Data.ForeignKeyConstraint fkc;
            fkc = new global::System.Data.ForeignKeyConstraint("CountryState", new global::System.Data.DataColumn[] {
                        this.tableCountry.CountryIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableState.CountryIDColumn});
            this.tableState.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("StateRegion", new global::System.Data.DataColumn[] {
                        this.tableState.StateIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableRegion.StateIDColumn});
            this.tableRegion.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("RegionCity", new global::System.Data.DataColumn[] {
                        this.tableRegion.RegionIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableCity.RegionIDColumn});
            this.tableCity.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("ServiceTypeServiceConfigType", new global::System.Data.DataColumn[] {
                        this.tableServiceType.ServiceTypeIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableServiceConfigType.ServiceTypeIDColumn});
            this.tableServiceConfigType.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("TemplateCategory_Template", new global::System.Data.DataColumn[] {
                        this.tableTemplateCategory.TemplateCategoryIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableTemplate.ParentTemplateCategoryIDColumn});
            this.tableTemplate.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CurrencyCurrencyRateFrom", new global::System.Data.DataColumn[] {
                        this.tableCurrency.CurrencyCodeColumn}, new global::System.Data.DataColumn[] {
                        this.tableCurrencyRate.CurrencyCodeFromColumn});
            this.tableCurrencyRate.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            fkc = new global::System.Data.ForeignKeyConstraint("CurrencyCurrencyRateTo", new global::System.Data.DataColumn[] {
                        this.tableCurrency.CurrencyCodeColumn}, new global::System.Data.DataColumn[] {
                        this.tableCurrencyRate.CurrencyCodeToColumn});
            this.tableCurrencyRate.Constraints.Add(fkc);
            fkc.AcceptRejectRule = global::System.Data.AcceptRejectRule.None;
            fkc.DeleteRule = global::System.Data.Rule.Cascade;
            fkc.UpdateRule = global::System.Data.Rule.Cascade;
            this.relationCountryState = new global::System.Data.DataRelation("CountryState", new global::System.Data.DataColumn[] {
                        this.tableCountry.CountryIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableState.CountryIDColumn}, false);
            this.Relations.Add(this.relationCountryState);
            this.relationStateRegion = new global::System.Data.DataRelation("StateRegion", new global::System.Data.DataColumn[] {
                        this.tableState.StateIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableRegion.StateIDColumn}, false);
            this.Relations.Add(this.relationStateRegion);
            this.relationRegionCity = new global::System.Data.DataRelation("RegionCity", new global::System.Data.DataColumn[] {
                        this.tableRegion.RegionIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableCity.RegionIDColumn}, false);
            this.Relations.Add(this.relationRegionCity);
            this.relationServiceTypeServiceConfigType = new global::System.Data.DataRelation("ServiceTypeServiceConfigType", new global::System.Data.DataColumn[] {
                        this.tableServiceType.ServiceTypeIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableServiceConfigType.ServiceTypeIDColumn}, false);
            this.Relations.Add(this.relationServiceTypeServiceConfigType);
            this.relationTemplateCategory_Template = new global::System.Data.DataRelation("TemplateCategory_Template", new global::System.Data.DataColumn[] {
                        this.tableTemplateCategory.TemplateCategoryIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableTemplate.ParentTemplateCategoryIDColumn}, false);
            this.Relations.Add(this.relationTemplateCategory_Template);
            this.relationCurrencyCurrencyRateFrom = new global::System.Data.DataRelation("CurrencyCurrencyRateFrom", new global::System.Data.DataColumn[] {
                        this.tableCurrency.CurrencyCodeColumn}, new global::System.Data.DataColumn[] {
                        this.tableCurrencyRate.CurrencyCodeFromColumn}, false);
            this.Relations.Add(this.relationCurrencyCurrencyRateFrom);
            this.relationCurrencyCurrencyRateTo = new global::System.Data.DataRelation("CurrencyCurrencyRateTo", new global::System.Data.DataColumn[] {
                        this.tableCurrency.CurrencyCodeColumn}, new global::System.Data.DataColumn[] {
                        this.tableCurrencyRate.CurrencyCodeToColumn}, false);
            this.Relations.Add(this.relationCurrencyCurrencyRateTo);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServiceType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGrade() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeGradeExternal() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCreditCard() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCountry() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeState() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRegion() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCity() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServiceConfigType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAgeGroup() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeItineraryStatus() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRequestStatus() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUser() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeBranch() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDepartment() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeItinerarySource() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAppSettings() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAgent() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSupplierConfigType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMenuType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePaymentType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCurrency() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTaxType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePaymentDue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAccountingCategory() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeContactCategory() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeOptionType() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFlag() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTemplateCategory() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTemplate() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCurrencyRate() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ToolSet ds = new ToolSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ServiceTypeRowChangeEventHandler(object sender, ServiceTypeRowChangeEvent e);
        
        public delegate void GradeRowChangeEventHandler(object sender, GradeRowChangeEvent e);
        
        public delegate void GradeExternalRowChangeEventHandler(object sender, GradeExternalRowChangeEvent e);
        
        public delegate void CreditCardRowChangeEventHandler(object sender, CreditCardRowChangeEvent e);
        
        public delegate void CountryRowChangeEventHandler(object sender, CountryRowChangeEvent e);
        
        public delegate void StateRowChangeEventHandler(object sender, StateRowChangeEvent e);
        
        public delegate void RegionRowChangeEventHandler(object sender, RegionRowChangeEvent e);
        
        public delegate void CityRowChangeEventHandler(object sender, CityRowChangeEvent e);
        
        public delegate void ServiceConfigTypeRowChangeEventHandler(object sender, ServiceConfigTypeRowChangeEvent e);
        
        public delegate void AgeGroupRowChangeEventHandler(object sender, AgeGroupRowChangeEvent e);
        
        public delegate void ItineraryStatusRowChangeEventHandler(object sender, ItineraryStatusRowChangeEvent e);
        
        public delegate void RequestStatusRowChangeEventHandler(object sender, RequestStatusRowChangeEvent e);
        
        public delegate void UserRowChangeEventHandler(object sender, UserRowChangeEvent e);
        
        public delegate void BranchRowChangeEventHandler(object sender, BranchRowChangeEvent e);
        
        public delegate void DepartmentRowChangeEventHandler(object sender, DepartmentRowChangeEvent e);
        
        public delegate void ItinerarySourceRowChangeEventHandler(object sender, ItinerarySourceRowChangeEvent e);
        
        public delegate void AppSettingsRowChangeEventHandler(object sender, AppSettingsRowChangeEvent e);
        
        public delegate void AgentRowChangeEventHandler(object sender, AgentRowChangeEvent e);
        
        public delegate void SupplierConfigTypeRowChangeEventHandler(object sender, SupplierConfigTypeRowChangeEvent e);
        
        public delegate void MenuTypeRowChangeEventHandler(object sender, MenuTypeRowChangeEvent e);
        
        public delegate void PaymentTypeRowChangeEventHandler(object sender, PaymentTypeRowChangeEvent e);
        
        public delegate void CurrencyRowChangeEventHandler(object sender, CurrencyRowChangeEvent e);
        
        public delegate void TaxTypeRowChangeEventHandler(object sender, TaxTypeRowChangeEvent e);
        
        public delegate void PaymentDueRowChangeEventHandler(object sender, PaymentDueRowChangeEvent e);
        
        public delegate void AccountingCategoryRowChangeEventHandler(object sender, AccountingCategoryRowChangeEvent e);
        
        public delegate void ContactCategoryRowChangeEventHandler(object sender, ContactCategoryRowChangeEvent e);
        
        public delegate void OptionTypeRowChangeEventHandler(object sender, OptionTypeRowChangeEvent e);
        
        public delegate void FlagRowChangeEventHandler(object sender, FlagRowChangeEvent e);
        
        public delegate void TemplateCategoryRowChangeEventHandler(object sender, TemplateCategoryRowChangeEvent e);
        
        public delegate void TemplateRowChangeEventHandler(object sender, TemplateRowChangeEvent e);
        
        public delegate void CurrencyRateRowChangeEventHandler(object sender, CurrencyRateRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServiceTypeDataTable : global::System.Data.TypedTableBase<ServiceTypeRow> {
            
            private global::System.Data.DataColumn columnServiceTypeID;
            
            private global::System.Data.DataColumn columnServiceTypeName;
            
            private global::System.Data.DataColumn columnBookingStartName;
            
            private global::System.Data.DataColumn columnBookingEndName;
            
            private global::System.Data.DataColumn columnNumberOfDaysName;
            
            private global::System.Data.DataColumn columnNetAccountingCategoryID;
            
            private global::System.Data.DataColumn columnNetTaxTypeID;
            
            private global::System.Data.DataColumn columnGrossAccountingCategoryID;
            
            private global::System.Data.DataColumn columnGrossTaxTypeID;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            private global::System.Data.DataColumn columnIsAdditionalMarkupContainer;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceTypeDataTable() {
                this.TableName = "ServiceType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServiceTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServiceTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceTypeIDColumn {
                get {
                    return this.columnServiceTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceTypeNameColumn {
                get {
                    return this.columnServiceTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BookingStartNameColumn {
                get {
                    return this.columnBookingStartName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BookingEndNameColumn {
                get {
                    return this.columnBookingEndName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberOfDaysNameColumn {
                get {
                    return this.columnNumberOfDaysName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NetAccountingCategoryIDColumn {
                get {
                    return this.columnNetAccountingCategoryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NetTaxTypeIDColumn {
                get {
                    return this.columnNetTaxTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrossAccountingCategoryIDColumn {
                get {
                    return this.columnGrossAccountingCategoryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GrossTaxTypeIDColumn {
                get {
                    return this.columnGrossTaxTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsAdditionalMarkupContainerColumn {
                get {
                    return this.columnIsAdditionalMarkupContainer;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceTypeRow this[int index] {
                get {
                    return ((ServiceTypeRow)(this.Rows[index]));
                }
            }
            
            public event ServiceTypeRowChangeEventHandler ServiceTypeRowChanging;
            
            public event ServiceTypeRowChangeEventHandler ServiceTypeRowChanged;
            
            public event ServiceTypeRowChangeEventHandler ServiceTypeRowDeleting;
            
            public event ServiceTypeRowChangeEventHandler ServiceTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServiceTypeRow(ServiceTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceTypeRow AddServiceTypeRow(string ServiceTypeName, string BookingStartName, string BookingEndName, string NumberOfDaysName, int NetAccountingCategoryID, int NetTaxTypeID, int GrossAccountingCategoryID, int GrossTaxTypeID, bool IsDeleted, bool IsAdditionalMarkupContainer) {
                ServiceTypeRow rowServiceTypeRow = ((ServiceTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ServiceTypeName,
                        BookingStartName,
                        BookingEndName,
                        NumberOfDaysName,
                        NetAccountingCategoryID,
                        NetTaxTypeID,
                        GrossAccountingCategoryID,
                        GrossTaxTypeID,
                        IsDeleted,
                        IsAdditionalMarkupContainer};
                rowServiceTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowServiceTypeRow);
                return rowServiceTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceTypeRow FindByServiceTypeID(int ServiceTypeID) {
                return ((ServiceTypeRow)(this.Rows.Find(new object[] {
                            ServiceTypeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ServiceTypeDataTable cln = ((ServiceTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ServiceTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnServiceTypeID = base.Columns["ServiceTypeID"];
                this.columnServiceTypeName = base.Columns["ServiceTypeName"];
                this.columnBookingStartName = base.Columns["BookingStartName"];
                this.columnBookingEndName = base.Columns["BookingEndName"];
                this.columnNumberOfDaysName = base.Columns["NumberOfDaysName"];
                this.columnNetAccountingCategoryID = base.Columns["NetAccountingCategoryID"];
                this.columnNetTaxTypeID = base.Columns["NetTaxTypeID"];
                this.columnGrossAccountingCategoryID = base.Columns["GrossAccountingCategoryID"];
                this.columnGrossTaxTypeID = base.Columns["GrossTaxTypeID"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
                this.columnIsAdditionalMarkupContainer = base.Columns["IsAdditionalMarkupContainer"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnServiceTypeID = new global::System.Data.DataColumn("ServiceTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceTypeID);
                this.columnServiceTypeName = new global::System.Data.DataColumn("ServiceTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceTypeName);
                this.columnBookingStartName = new global::System.Data.DataColumn("BookingStartName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBookingStartName);
                this.columnBookingEndName = new global::System.Data.DataColumn("BookingEndName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBookingEndName);
                this.columnNumberOfDaysName = new global::System.Data.DataColumn("NumberOfDaysName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumberOfDaysName);
                this.columnNetAccountingCategoryID = new global::System.Data.DataColumn("NetAccountingCategoryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNetAccountingCategoryID);
                this.columnNetTaxTypeID = new global::System.Data.DataColumn("NetTaxTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNetTaxTypeID);
                this.columnGrossAccountingCategoryID = new global::System.Data.DataColumn("GrossAccountingCategoryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrossAccountingCategoryID);
                this.columnGrossTaxTypeID = new global::System.Data.DataColumn("GrossTaxTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGrossTaxTypeID);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.columnIsAdditionalMarkupContainer = new global::System.Data.DataColumn("IsAdditionalMarkupContainer", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsAdditionalMarkupContainer);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ToolSetKey1", new global::System.Data.DataColumn[] {
                                this.columnServiceTypeID}, true));
                this.columnServiceTypeID.AutoIncrement = true;
                this.columnServiceTypeID.AutoIncrementSeed = -1;
                this.columnServiceTypeID.AutoIncrementStep = -1;
                this.columnServiceTypeID.AllowDBNull = false;
                this.columnServiceTypeID.ReadOnly = true;
                this.columnServiceTypeID.Unique = true;
                this.columnServiceTypeName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceTypeRow NewServiceTypeRow() {
                return ((ServiceTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ServiceTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ServiceTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServiceTypeRowChanged != null)) {
                    this.ServiceTypeRowChanged(this, new ServiceTypeRowChangeEvent(((ServiceTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServiceTypeRowChanging != null)) {
                    this.ServiceTypeRowChanging(this, new ServiceTypeRowChangeEvent(((ServiceTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServiceTypeRowDeleted != null)) {
                    this.ServiceTypeRowDeleted(this, new ServiceTypeRowChangeEvent(((ServiceTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServiceTypeRowDeleting != null)) {
                    this.ServiceTypeRowDeleting(this, new ServiceTypeRowChangeEvent(((ServiceTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServiceTypeRow(ServiceTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServiceTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GradeDataTable : global::System.Data.TypedTableBase<GradeRow> {
            
            private global::System.Data.DataColumn columnGradeID;
            
            private global::System.Data.DataColumn columnGradeName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GradeDataTable() {
                this.TableName = "Grade";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GradeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GradeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GradeIDColumn {
                get {
                    return this.columnGradeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GradeNameColumn {
                get {
                    return this.columnGradeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GradeRow this[int index] {
                get {
                    return ((GradeRow)(this.Rows[index]));
                }
            }
            
            public event GradeRowChangeEventHandler GradeRowChanging;
            
            public event GradeRowChangeEventHandler GradeRowChanged;
            
            public event GradeRowChangeEventHandler GradeRowDeleting;
            
            public event GradeRowChangeEventHandler GradeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGradeRow(GradeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GradeRow AddGradeRow(string GradeName) {
                GradeRow rowGradeRow = ((GradeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        GradeName};
                rowGradeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGradeRow);
                return rowGradeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GradeRow FindByGradeID(int GradeID) {
                return ((GradeRow)(this.Rows.Find(new object[] {
                            GradeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GradeDataTable cln = ((GradeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GradeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGradeID = base.Columns["GradeID"];
                this.columnGradeName = base.Columns["GradeName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGradeID = new global::System.Data.DataColumn("GradeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGradeID);
                this.columnGradeName = new global::System.Data.DataColumn("GradeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGradeName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ToolSetKey2", new global::System.Data.DataColumn[] {
                                this.columnGradeID}, true));
                this.columnGradeID.AutoIncrement = true;
                this.columnGradeID.AutoIncrementSeed = -1;
                this.columnGradeID.AutoIncrementStep = -1;
                this.columnGradeID.AllowDBNull = false;
                this.columnGradeID.ReadOnly = true;
                this.columnGradeID.Unique = true;
                this.columnGradeName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GradeRow NewGradeRow() {
                return ((GradeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GradeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GradeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GradeRowChanged != null)) {
                    this.GradeRowChanged(this, new GradeRowChangeEvent(((GradeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GradeRowChanging != null)) {
                    this.GradeRowChanging(this, new GradeRowChangeEvent(((GradeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GradeRowDeleted != null)) {
                    this.GradeRowDeleted(this, new GradeRowChangeEvent(((GradeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GradeRowDeleting != null)) {
                    this.GradeRowDeleting(this, new GradeRowChangeEvent(((GradeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGradeRow(GradeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GradeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class GradeExternalDataTable : global::System.Data.TypedTableBase<GradeExternalRow> {
            
            private global::System.Data.DataColumn columnGradeExternalID;
            
            private global::System.Data.DataColumn columnGradeExternalName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GradeExternalDataTable() {
                this.TableName = "GradeExternal";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GradeExternalDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected GradeExternalDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GradeExternalIDColumn {
                get {
                    return this.columnGradeExternalID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GradeExternalNameColumn {
                get {
                    return this.columnGradeExternalName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GradeExternalRow this[int index] {
                get {
                    return ((GradeExternalRow)(this.Rows[index]));
                }
            }
            
            public event GradeExternalRowChangeEventHandler GradeExternalRowChanging;
            
            public event GradeExternalRowChangeEventHandler GradeExternalRowChanged;
            
            public event GradeExternalRowChangeEventHandler GradeExternalRowDeleting;
            
            public event GradeExternalRowChangeEventHandler GradeExternalRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddGradeExternalRow(GradeExternalRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GradeExternalRow AddGradeExternalRow(string GradeExternalName) {
                GradeExternalRow rowGradeExternalRow = ((GradeExternalRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        GradeExternalName};
                rowGradeExternalRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowGradeExternalRow);
                return rowGradeExternalRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GradeExternalRow FindByGradeExternalID(int GradeExternalID) {
                return ((GradeExternalRow)(this.Rows.Find(new object[] {
                            GradeExternalID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                GradeExternalDataTable cln = ((GradeExternalDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new GradeExternalDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnGradeExternalID = base.Columns["GradeExternalID"];
                this.columnGradeExternalName = base.Columns["GradeExternalName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnGradeExternalID = new global::System.Data.DataColumn("GradeExternalID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGradeExternalID);
                this.columnGradeExternalName = new global::System.Data.DataColumn("GradeExternalName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGradeExternalName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ToolSetKey23", new global::System.Data.DataColumn[] {
                                this.columnGradeExternalID}, true));
                this.columnGradeExternalID.AutoIncrement = true;
                this.columnGradeExternalID.AutoIncrementSeed = -1;
                this.columnGradeExternalID.AutoIncrementStep = -1;
                this.columnGradeExternalID.AllowDBNull = false;
                this.columnGradeExternalID.ReadOnly = true;
                this.columnGradeExternalID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GradeExternalRow NewGradeExternalRow() {
                return ((GradeExternalRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new GradeExternalRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(GradeExternalRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.GradeExternalRowChanged != null)) {
                    this.GradeExternalRowChanged(this, new GradeExternalRowChangeEvent(((GradeExternalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.GradeExternalRowChanging != null)) {
                    this.GradeExternalRowChanging(this, new GradeExternalRowChangeEvent(((GradeExternalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.GradeExternalRowDeleted != null)) {
                    this.GradeExternalRowDeleted(this, new GradeExternalRowChangeEvent(((GradeExternalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.GradeExternalRowDeleting != null)) {
                    this.GradeExternalRowDeleting(this, new GradeExternalRowChangeEvent(((GradeExternalRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveGradeExternalRow(GradeExternalRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "GradeExternalDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CreditCardDataTable : global::System.Data.TypedTableBase<CreditCardRow> {
            
            private global::System.Data.DataColumn columnCreditCardID;
            
            private global::System.Data.DataColumn columnCreditCardName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CreditCardDataTable() {
                this.TableName = "CreditCard";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CreditCardDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CreditCardDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreditCardIDColumn {
                get {
                    return this.columnCreditCardID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreditCardNameColumn {
                get {
                    return this.columnCreditCardName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CreditCardRow this[int index] {
                get {
                    return ((CreditCardRow)(this.Rows[index]));
                }
            }
            
            public event CreditCardRowChangeEventHandler CreditCardRowChanging;
            
            public event CreditCardRowChangeEventHandler CreditCardRowChanged;
            
            public event CreditCardRowChangeEventHandler CreditCardRowDeleting;
            
            public event CreditCardRowChangeEventHandler CreditCardRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCreditCardRow(CreditCardRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CreditCardRow AddCreditCardRow(string CreditCardName) {
                CreditCardRow rowCreditCardRow = ((CreditCardRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CreditCardName};
                rowCreditCardRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCreditCardRow);
                return rowCreditCardRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CreditCardRow FindByCreditCardID(int CreditCardID) {
                return ((CreditCardRow)(this.Rows.Find(new object[] {
                            CreditCardID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CreditCardDataTable cln = ((CreditCardDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CreditCardDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCreditCardID = base.Columns["CreditCardID"];
                this.columnCreditCardName = base.Columns["CreditCardName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCreditCardID = new global::System.Data.DataColumn("CreditCardID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreditCardID);
                this.columnCreditCardName = new global::System.Data.DataColumn("CreditCardName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreditCardName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ToolSetKey3", new global::System.Data.DataColumn[] {
                                this.columnCreditCardID}, true));
                this.columnCreditCardID.AutoIncrement = true;
                this.columnCreditCardID.AutoIncrementSeed = -1;
                this.columnCreditCardID.AutoIncrementStep = -1;
                this.columnCreditCardID.AllowDBNull = false;
                this.columnCreditCardID.ReadOnly = true;
                this.columnCreditCardID.Unique = true;
                this.columnCreditCardName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CreditCardRow NewCreditCardRow() {
                return ((CreditCardRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CreditCardRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CreditCardRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CreditCardRowChanged != null)) {
                    this.CreditCardRowChanged(this, new CreditCardRowChangeEvent(((CreditCardRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CreditCardRowChanging != null)) {
                    this.CreditCardRowChanging(this, new CreditCardRowChangeEvent(((CreditCardRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CreditCardRowDeleted != null)) {
                    this.CreditCardRowDeleted(this, new CreditCardRowChangeEvent(((CreditCardRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CreditCardRowDeleting != null)) {
                    this.CreditCardRowDeleting(this, new CreditCardRowChangeEvent(((CreditCardRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCreditCardRow(CreditCardRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CreditCardDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CountryDataTable : global::System.Data.TypedTableBase<CountryRow> {
            
            private global::System.Data.DataColumn columnCountryID;
            
            private global::System.Data.DataColumn columnCountryName;
            
            private global::System.Data.DataColumn columnCountryCode;
            
            private global::System.Data.DataColumn columnPhoneCode;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryDataTable() {
                this.TableName = "Country";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CountryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CountryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryNameColumn {
                get {
                    return this.columnCountryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryCodeColumn {
                get {
                    return this.columnCountryCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhoneCodeColumn {
                get {
                    return this.columnPhoneCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRow this[int index] {
                get {
                    return ((CountryRow)(this.Rows[index]));
                }
            }
            
            public event CountryRowChangeEventHandler CountryRowChanging;
            
            public event CountryRowChangeEventHandler CountryRowChanged;
            
            public event CountryRowChangeEventHandler CountryRowDeleting;
            
            public event CountryRowChangeEventHandler CountryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCountryRow(CountryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRow AddCountryRow(string CountryName, string CountryCode, string PhoneCode) {
                CountryRow rowCountryRow = ((CountryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CountryName,
                        CountryCode,
                        PhoneCode};
                rowCountryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCountryRow);
                return rowCountryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRow FindByCountryID(int CountryID) {
                return ((CountryRow)(this.Rows.Find(new object[] {
                            CountryID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CountryDataTable cln = ((CountryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CountryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCountryID = base.Columns["CountryID"];
                this.columnCountryName = base.Columns["CountryName"];
                this.columnCountryCode = base.Columns["CountryCode"];
                this.columnPhoneCode = base.Columns["PhoneCode"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCountryID = new global::System.Data.DataColumn("CountryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountryID);
                this.columnCountryName = new global::System.Data.DataColumn("CountryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountryName);
                this.columnCountryCode = new global::System.Data.DataColumn("CountryCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountryCode);
                this.columnPhoneCode = new global::System.Data.DataColumn("PhoneCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhoneCode);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ToolSetKey8", new global::System.Data.DataColumn[] {
                                this.columnCountryID}, true));
                this.columnCountryID.AutoIncrement = true;
                this.columnCountryID.AutoIncrementSeed = -1;
                this.columnCountryID.AutoIncrementStep = -1;
                this.columnCountryID.AllowDBNull = false;
                this.columnCountryID.ReadOnly = true;
                this.columnCountryID.Unique = true;
                this.columnCountryName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRow NewCountryRow() {
                return ((CountryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CountryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CountryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CountryRowChanged != null)) {
                    this.CountryRowChanged(this, new CountryRowChangeEvent(((CountryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CountryRowChanging != null)) {
                    this.CountryRowChanging(this, new CountryRowChangeEvent(((CountryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CountryRowDeleted != null)) {
                    this.CountryRowDeleted(this, new CountryRowChangeEvent(((CountryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CountryRowDeleting != null)) {
                    this.CountryRowDeleting(this, new CountryRowChangeEvent(((CountryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCountryRow(CountryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CountryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StateDataTable : global::System.Data.TypedTableBase<StateRow> {
            
            private global::System.Data.DataColumn columnStateID;
            
            private global::System.Data.DataColumn columnStateName;
            
            private global::System.Data.DataColumn columnCountryID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateDataTable() {
                this.TableName = "State";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected StateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateIDColumn {
                get {
                    return this.columnStateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateNameColumn {
                get {
                    return this.columnStateName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountryIDColumn {
                get {
                    return this.columnCountryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateRow this[int index] {
                get {
                    return ((StateRow)(this.Rows[index]));
                }
            }
            
            public event StateRowChangeEventHandler StateRowChanging;
            
            public event StateRowChangeEventHandler StateRowChanged;
            
            public event StateRowChangeEventHandler StateRowDeleting;
            
            public event StateRowChangeEventHandler StateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStateRow(StateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateRow AddStateRow(string StateName, CountryRow parentCountryRowByCountryState) {
                StateRow rowStateRow = ((StateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        StateName,
                        null};
                if ((parentCountryRowByCountryState != null)) {
                    columnValuesArray[2] = parentCountryRowByCountryState[0];
                }
                rowStateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStateRow);
                return rowStateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateRow FindByStateID(int StateID) {
                return ((StateRow)(this.Rows.Find(new object[] {
                            StateID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StateDataTable cln = ((StateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnStateID = base.Columns["StateID"];
                this.columnStateName = base.Columns["StateName"];
                this.columnCountryID = base.Columns["CountryID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnStateID = new global::System.Data.DataColumn("StateID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStateID);
                this.columnStateName = new global::System.Data.DataColumn("StateName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStateName);
                this.columnCountryID = new global::System.Data.DataColumn("CountryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCountryID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ToolSetKey7", new global::System.Data.DataColumn[] {
                                this.columnStateID}, true));
                this.columnStateID.AutoIncrement = true;
                this.columnStateID.AutoIncrementSeed = -1;
                this.columnStateID.AutoIncrementStep = -1;
                this.columnStateID.AllowDBNull = false;
                this.columnStateID.ReadOnly = true;
                this.columnStateID.Unique = true;
                this.columnStateName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateRow NewStateRow() {
                return ((StateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StateRowChanged != null)) {
                    this.StateRowChanged(this, new StateRowChangeEvent(((StateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StateRowChanging != null)) {
                    this.StateRowChanging(this, new StateRowChangeEvent(((StateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StateRowDeleted != null)) {
                    this.StateRowDeleted(this, new StateRowChangeEvent(((StateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StateRowDeleting != null)) {
                    this.StateRowDeleting(this, new StateRowChangeEvent(((StateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStateRow(StateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RegionDataTable : global::System.Data.TypedTableBase<RegionRow> {
            
            private global::System.Data.DataColumn columnRegionID;
            
            private global::System.Data.DataColumn columnRegionName;
            
            private global::System.Data.DataColumn columnStateID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegionDataTable() {
                this.TableName = "Region";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RegionDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RegionDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionIDColumn {
                get {
                    return this.columnRegionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionNameColumn {
                get {
                    return this.columnRegionName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StateIDColumn {
                get {
                    return this.columnStateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegionRow this[int index] {
                get {
                    return ((RegionRow)(this.Rows[index]));
                }
            }
            
            public event RegionRowChangeEventHandler RegionRowChanging;
            
            public event RegionRowChangeEventHandler RegionRowChanged;
            
            public event RegionRowChangeEventHandler RegionRowDeleting;
            
            public event RegionRowChangeEventHandler RegionRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRegionRow(RegionRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegionRow AddRegionRow(string RegionName, StateRow parentStateRowByStateRegion) {
                RegionRow rowRegionRow = ((RegionRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        RegionName,
                        null};
                if ((parentStateRowByStateRegion != null)) {
                    columnValuesArray[2] = parentStateRowByStateRegion[0];
                }
                rowRegionRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRegionRow);
                return rowRegionRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegionRow FindByRegionID(int RegionID) {
                return ((RegionRow)(this.Rows.Find(new object[] {
                            RegionID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RegionDataTable cln = ((RegionDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RegionDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRegionID = base.Columns["RegionID"];
                this.columnRegionName = base.Columns["RegionName"];
                this.columnStateID = base.Columns["StateID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRegionID = new global::System.Data.DataColumn("RegionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegionID);
                this.columnRegionName = new global::System.Data.DataColumn("RegionName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegionName);
                this.columnStateID = new global::System.Data.DataColumn("StateID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStateID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ToolSetKey6", new global::System.Data.DataColumn[] {
                                this.columnRegionID}, true));
                this.columnRegionID.AutoIncrement = true;
                this.columnRegionID.AutoIncrementSeed = -1;
                this.columnRegionID.AutoIncrementStep = -1;
                this.columnRegionID.AllowDBNull = false;
                this.columnRegionID.ReadOnly = true;
                this.columnRegionID.Unique = true;
                this.columnRegionName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegionRow NewRegionRow() {
                return ((RegionRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RegionRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RegionRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RegionRowChanged != null)) {
                    this.RegionRowChanged(this, new RegionRowChangeEvent(((RegionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RegionRowChanging != null)) {
                    this.RegionRowChanging(this, new RegionRowChangeEvent(((RegionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RegionRowDeleted != null)) {
                    this.RegionRowDeleted(this, new RegionRowChangeEvent(((RegionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RegionRowDeleting != null)) {
                    this.RegionRowDeleting(this, new RegionRowChangeEvent(((RegionRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRegionRow(RegionRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RegionDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CityDataTable : global::System.Data.TypedTableBase<CityRow> {
            
            private global::System.Data.DataColumn columnCityID;
            
            private global::System.Data.DataColumn columnCityName;
            
            private global::System.Data.DataColumn columnRegionID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CityDataTable() {
                this.TableName = "City";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CityDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CityDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityIDColumn {
                get {
                    return this.columnCityID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CityNameColumn {
                get {
                    return this.columnCityName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RegionIDColumn {
                get {
                    return this.columnRegionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CityRow this[int index] {
                get {
                    return ((CityRow)(this.Rows[index]));
                }
            }
            
            public event CityRowChangeEventHandler CityRowChanging;
            
            public event CityRowChangeEventHandler CityRowChanged;
            
            public event CityRowChangeEventHandler CityRowDeleting;
            
            public event CityRowChangeEventHandler CityRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCityRow(CityRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CityRow AddCityRow(string CityName, RegionRow parentRegionRowByRegionCity) {
                CityRow rowCityRow = ((CityRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        CityName,
                        null};
                if ((parentRegionRowByRegionCity != null)) {
                    columnValuesArray[2] = parentRegionRowByRegionCity[0];
                }
                rowCityRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCityRow);
                return rowCityRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CityRow FindByCityID(int CityID) {
                return ((CityRow)(this.Rows.Find(new object[] {
                            CityID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CityDataTable cln = ((CityDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CityDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCityID = base.Columns["CityID"];
                this.columnCityName = base.Columns["CityName"];
                this.columnRegionID = base.Columns["RegionID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCityID = new global::System.Data.DataColumn("CityID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCityID);
                this.columnCityName = new global::System.Data.DataColumn("CityName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCityName);
                this.columnRegionID = new global::System.Data.DataColumn("RegionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRegionID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ToolSetKey5", new global::System.Data.DataColumn[] {
                                this.columnCityID}, true));
                this.columnCityID.AutoIncrement = true;
                this.columnCityID.AutoIncrementSeed = -1;
                this.columnCityID.AutoIncrementStep = -1;
                this.columnCityID.AllowDBNull = false;
                this.columnCityID.ReadOnly = true;
                this.columnCityID.Unique = true;
                this.columnCityName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CityRow NewCityRow() {
                return ((CityRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CityRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CityRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CityRowChanged != null)) {
                    this.CityRowChanged(this, new CityRowChangeEvent(((CityRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CityRowChanging != null)) {
                    this.CityRowChanging(this, new CityRowChangeEvent(((CityRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CityRowDeleted != null)) {
                    this.CityRowDeleted(this, new CityRowChangeEvent(((CityRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CityRowDeleting != null)) {
                    this.CityRowDeleting(this, new CityRowChangeEvent(((CityRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCityRow(CityRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CityDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServiceConfigTypeDataTable : global::System.Data.TypedTableBase<ServiceConfigTypeRow> {
            
            private global::System.Data.DataColumn columnServiceConfigTypeID;
            
            private global::System.Data.DataColumn columnServiceTypeID;
            
            private global::System.Data.DataColumn columnServiceConfigTypeName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceConfigTypeDataTable() {
                this.TableName = "ServiceConfigType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServiceConfigTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ServiceConfigTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceConfigTypeIDColumn {
                get {
                    return this.columnServiceConfigTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceTypeIDColumn {
                get {
                    return this.columnServiceTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServiceConfigTypeNameColumn {
                get {
                    return this.columnServiceConfigTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceConfigTypeRow this[int index] {
                get {
                    return ((ServiceConfigTypeRow)(this.Rows[index]));
                }
            }
            
            public event ServiceConfigTypeRowChangeEventHandler ServiceConfigTypeRowChanging;
            
            public event ServiceConfigTypeRowChangeEventHandler ServiceConfigTypeRowChanged;
            
            public event ServiceConfigTypeRowChangeEventHandler ServiceConfigTypeRowDeleting;
            
            public event ServiceConfigTypeRowChangeEventHandler ServiceConfigTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServiceConfigTypeRow(ServiceConfigTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceConfigTypeRow AddServiceConfigTypeRow(ServiceTypeRow parentServiceTypeRowByServiceTypeServiceConfigType, string ServiceConfigTypeName) {
                ServiceConfigTypeRow rowServiceConfigTypeRow = ((ServiceConfigTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        ServiceConfigTypeName};
                if ((parentServiceTypeRowByServiceTypeServiceConfigType != null)) {
                    columnValuesArray[1] = parentServiceTypeRowByServiceTypeServiceConfigType[0];
                }
                rowServiceConfigTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowServiceConfigTypeRow);
                return rowServiceConfigTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceConfigTypeRow FindByServiceConfigTypeID(int ServiceConfigTypeID) {
                return ((ServiceConfigTypeRow)(this.Rows.Find(new object[] {
                            ServiceConfigTypeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ServiceConfigTypeDataTable cln = ((ServiceConfigTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ServiceConfigTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnServiceConfigTypeID = base.Columns["ServiceConfigTypeID"];
                this.columnServiceTypeID = base.Columns["ServiceTypeID"];
                this.columnServiceConfigTypeName = base.Columns["ServiceConfigTypeName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnServiceConfigTypeID = new global::System.Data.DataColumn("ServiceConfigTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceConfigTypeID);
                this.columnServiceTypeID = new global::System.Data.DataColumn("ServiceTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceTypeID);
                this.columnServiceConfigTypeName = new global::System.Data.DataColumn("ServiceConfigTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServiceConfigTypeName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ToolSetKey9", new global::System.Data.DataColumn[] {
                                this.columnServiceConfigTypeID}, true));
                this.columnServiceConfigTypeID.AutoIncrement = true;
                this.columnServiceConfigTypeID.AutoIncrementSeed = -1;
                this.columnServiceConfigTypeID.AutoIncrementStep = -1;
                this.columnServiceConfigTypeID.AllowDBNull = false;
                this.columnServiceConfigTypeID.ReadOnly = true;
                this.columnServiceConfigTypeID.Unique = true;
                this.columnServiceTypeID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceConfigTypeRow NewServiceConfigTypeRow() {
                return ((ServiceConfigTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ServiceConfigTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ServiceConfigTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServiceConfigTypeRowChanged != null)) {
                    this.ServiceConfigTypeRowChanged(this, new ServiceConfigTypeRowChangeEvent(((ServiceConfigTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServiceConfigTypeRowChanging != null)) {
                    this.ServiceConfigTypeRowChanging(this, new ServiceConfigTypeRowChangeEvent(((ServiceConfigTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServiceConfigTypeRowDeleted != null)) {
                    this.ServiceConfigTypeRowDeleted(this, new ServiceConfigTypeRowChangeEvent(((ServiceConfigTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServiceConfigTypeRowDeleting != null)) {
                    this.ServiceConfigTypeRowDeleting(this, new ServiceConfigTypeRowChangeEvent(((ServiceConfigTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServiceConfigTypeRow(ServiceConfigTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServiceConfigTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AgeGroupDataTable : global::System.Data.TypedTableBase<AgeGroupRow> {
            
            private global::System.Data.DataColumn columnAgeGroupID;
            
            private global::System.Data.DataColumn columnAgeGroupName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AgeGroupDataTable() {
                this.TableName = "AgeGroup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AgeGroupDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AgeGroupDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgeGroupIDColumn {
                get {
                    return this.columnAgeGroupID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgeGroupNameColumn {
                get {
                    return this.columnAgeGroupName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AgeGroupRow this[int index] {
                get {
                    return ((AgeGroupRow)(this.Rows[index]));
                }
            }
            
            public event AgeGroupRowChangeEventHandler AgeGroupRowChanging;
            
            public event AgeGroupRowChangeEventHandler AgeGroupRowChanged;
            
            public event AgeGroupRowChangeEventHandler AgeGroupRowDeleting;
            
            public event AgeGroupRowChangeEventHandler AgeGroupRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAgeGroupRow(AgeGroupRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AgeGroupRow AddAgeGroupRow(string AgeGroupName) {
                AgeGroupRow rowAgeGroupRow = ((AgeGroupRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        AgeGroupName};
                rowAgeGroupRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAgeGroupRow);
                return rowAgeGroupRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AgeGroupRow FindByAgeGroupID(int AgeGroupID) {
                return ((AgeGroupRow)(this.Rows.Find(new object[] {
                            AgeGroupID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AgeGroupDataTable cln = ((AgeGroupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AgeGroupDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAgeGroupID = base.Columns["AgeGroupID"];
                this.columnAgeGroupName = base.Columns["AgeGroupName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAgeGroupID = new global::System.Data.DataColumn("AgeGroupID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgeGroupID);
                this.columnAgeGroupName = new global::System.Data.DataColumn("AgeGroupName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgeGroupName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ToolSetKey10", new global::System.Data.DataColumn[] {
                                this.columnAgeGroupID}, true));
                this.columnAgeGroupID.AutoIncrement = true;
                this.columnAgeGroupID.AutoIncrementSeed = -1;
                this.columnAgeGroupID.AutoIncrementStep = -1;
                this.columnAgeGroupID.AllowDBNull = false;
                this.columnAgeGroupID.ReadOnly = true;
                this.columnAgeGroupID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AgeGroupRow NewAgeGroupRow() {
                return ((AgeGroupRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AgeGroupRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AgeGroupRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AgeGroupRowChanged != null)) {
                    this.AgeGroupRowChanged(this, new AgeGroupRowChangeEvent(((AgeGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AgeGroupRowChanging != null)) {
                    this.AgeGroupRowChanging(this, new AgeGroupRowChangeEvent(((AgeGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AgeGroupRowDeleted != null)) {
                    this.AgeGroupRowDeleted(this, new AgeGroupRowChangeEvent(((AgeGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AgeGroupRowDeleting != null)) {
                    this.AgeGroupRowDeleting(this, new AgeGroupRowChangeEvent(((AgeGroupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAgeGroupRow(AgeGroupRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AgeGroupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ItineraryStatusDataTable : global::System.Data.TypedTableBase<ItineraryStatusRow> {
            
            private global::System.Data.DataColumn columnItineraryStatusID;
            
            private global::System.Data.DataColumn columnItineraryStatusName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItineraryStatusDataTable() {
                this.TableName = "ItineraryStatus";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ItineraryStatusDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ItineraryStatusDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItineraryStatusIDColumn {
                get {
                    return this.columnItineraryStatusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItineraryStatusNameColumn {
                get {
                    return this.columnItineraryStatusName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItineraryStatusRow this[int index] {
                get {
                    return ((ItineraryStatusRow)(this.Rows[index]));
                }
            }
            
            public event ItineraryStatusRowChangeEventHandler ItineraryStatusRowChanging;
            
            public event ItineraryStatusRowChangeEventHandler ItineraryStatusRowChanged;
            
            public event ItineraryStatusRowChangeEventHandler ItineraryStatusRowDeleting;
            
            public event ItineraryStatusRowChangeEventHandler ItineraryStatusRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddItineraryStatusRow(ItineraryStatusRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItineraryStatusRow AddItineraryStatusRow(string ItineraryStatusName) {
                ItineraryStatusRow rowItineraryStatusRow = ((ItineraryStatusRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ItineraryStatusName};
                rowItineraryStatusRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowItineraryStatusRow);
                return rowItineraryStatusRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItineraryStatusRow FindByItineraryStatusID(int ItineraryStatusID) {
                return ((ItineraryStatusRow)(this.Rows.Find(new object[] {
                            ItineraryStatusID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ItineraryStatusDataTable cln = ((ItineraryStatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ItineraryStatusDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnItineraryStatusID = base.Columns["ItineraryStatusID"];
                this.columnItineraryStatusName = base.Columns["ItineraryStatusName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnItineraryStatusID = new global::System.Data.DataColumn("ItineraryStatusID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItineraryStatusID);
                this.columnItineraryStatusName = new global::System.Data.DataColumn("ItineraryStatusName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItineraryStatusName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ToolSetKey11", new global::System.Data.DataColumn[] {
                                this.columnItineraryStatusID}, true));
                this.columnItineraryStatusID.AutoIncrement = true;
                this.columnItineraryStatusID.AutoIncrementSeed = -1;
                this.columnItineraryStatusID.AutoIncrementStep = -1;
                this.columnItineraryStatusID.AllowDBNull = false;
                this.columnItineraryStatusID.ReadOnly = true;
                this.columnItineraryStatusID.Unique = true;
                this.columnItineraryStatusName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItineraryStatusRow NewItineraryStatusRow() {
                return ((ItineraryStatusRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ItineraryStatusRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ItineraryStatusRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ItineraryStatusRowChanged != null)) {
                    this.ItineraryStatusRowChanged(this, new ItineraryStatusRowChangeEvent(((ItineraryStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ItineraryStatusRowChanging != null)) {
                    this.ItineraryStatusRowChanging(this, new ItineraryStatusRowChangeEvent(((ItineraryStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ItineraryStatusRowDeleted != null)) {
                    this.ItineraryStatusRowDeleted(this, new ItineraryStatusRowChangeEvent(((ItineraryStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ItineraryStatusRowDeleting != null)) {
                    this.ItineraryStatusRowDeleting(this, new ItineraryStatusRowChangeEvent(((ItineraryStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveItineraryStatusRow(ItineraryStatusRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ItineraryStatusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RequestStatusDataTable : global::System.Data.TypedTableBase<RequestStatusRow> {
            
            private global::System.Data.DataColumn columnRequestStatusID;
            
            private global::System.Data.DataColumn columnRequestStatusName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestStatusDataTable() {
                this.TableName = "RequestStatus";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RequestStatusDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RequestStatusDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequestStatusIDColumn {
                get {
                    return this.columnRequestStatusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequestStatusNameColumn {
                get {
                    return this.columnRequestStatusName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestStatusRow this[int index] {
                get {
                    return ((RequestStatusRow)(this.Rows[index]));
                }
            }
            
            public event RequestStatusRowChangeEventHandler RequestStatusRowChanging;
            
            public event RequestStatusRowChangeEventHandler RequestStatusRowChanged;
            
            public event RequestStatusRowChangeEventHandler RequestStatusRowDeleting;
            
            public event RequestStatusRowChangeEventHandler RequestStatusRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRequestStatusRow(RequestStatusRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestStatusRow AddRequestStatusRow(string RequestStatusName) {
                RequestStatusRow rowRequestStatusRow = ((RequestStatusRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        RequestStatusName};
                rowRequestStatusRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRequestStatusRow);
                return rowRequestStatusRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestStatusRow FindByRequestStatusID(int RequestStatusID) {
                return ((RequestStatusRow)(this.Rows.Find(new object[] {
                            RequestStatusID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RequestStatusDataTable cln = ((RequestStatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RequestStatusDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRequestStatusID = base.Columns["RequestStatusID"];
                this.columnRequestStatusName = base.Columns["RequestStatusName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRequestStatusID = new global::System.Data.DataColumn("RequestStatusID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequestStatusID);
                this.columnRequestStatusName = new global::System.Data.DataColumn("RequestStatusName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequestStatusName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ToolSetKey12", new global::System.Data.DataColumn[] {
                                this.columnRequestStatusID}, true));
                this.columnRequestStatusID.AutoIncrement = true;
                this.columnRequestStatusID.AutoIncrementSeed = -1;
                this.columnRequestStatusID.AutoIncrementStep = -1;
                this.columnRequestStatusID.AllowDBNull = false;
                this.columnRequestStatusID.ReadOnly = true;
                this.columnRequestStatusID.Unique = true;
                this.columnRequestStatusName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestStatusRow NewRequestStatusRow() {
                return ((RequestStatusRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RequestStatusRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RequestStatusRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RequestStatusRowChanged != null)) {
                    this.RequestStatusRowChanged(this, new RequestStatusRowChangeEvent(((RequestStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RequestStatusRowChanging != null)) {
                    this.RequestStatusRowChanging(this, new RequestStatusRowChangeEvent(((RequestStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RequestStatusRowDeleted != null)) {
                    this.RequestStatusRowDeleted(this, new RequestStatusRowChangeEvent(((RequestStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RequestStatusRowDeleting != null)) {
                    this.RequestStatusRowDeleting(this, new RequestStatusRowChangeEvent(((RequestStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRequestStatusRow(RequestStatusRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RequestStatusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UserDataTable : global::System.Data.TypedTableBase<UserRow> {
            
            private global::System.Data.DataColumn columnUserID;
            
            private global::System.Data.DataColumn columnUserName;
            
            private global::System.Data.DataColumn columnPassword;
            
            private global::System.Data.DataColumn columnDisplayName;
            
            private global::System.Data.DataColumn columnEmail;
            
            private global::System.Data.DataColumn columnContactID;
            
            private global::System.Data.DataColumn columnIsRecordActive;
            
            private global::System.Data.DataColumn columnMustChangePassword;
            
            private global::System.Data.DataColumn columnAddedOn;
            
            private global::System.Data.DataColumn columnAddedBy;
            
            private global::System.Data.DataColumn columnRowVersion;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserDataTable() {
                this.TableName = "User";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UserDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserIDColumn {
                get {
                    return this.columnUserID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UserNameColumn {
                get {
                    return this.columnUserName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DisplayNameColumn {
                get {
                    return this.columnDisplayName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContactIDColumn {
                get {
                    return this.columnContactID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsRecordActiveColumn {
                get {
                    return this.columnIsRecordActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MustChangePasswordColumn {
                get {
                    return this.columnMustChangePassword;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddedOnColumn {
                get {
                    return this.columnAddedOn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddedByColumn {
                get {
                    return this.columnAddedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow this[int index] {
                get {
                    return ((UserRow)(this.Rows[index]));
                }
            }
            
            public event UserRowChangeEventHandler UserRowChanging;
            
            public event UserRowChangeEventHandler UserRowChanged;
            
            public event UserRowChangeEventHandler UserRowDeleting;
            
            public event UserRowChangeEventHandler UserRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUserRow(UserRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow AddUserRow(string UserName, string Password, string DisplayName, string Email, int ContactID, bool IsRecordActive, bool MustChangePassword, System.DateTime AddedOn, int AddedBy, byte[] RowVersion) {
                UserRow rowUserRow = ((UserRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        UserName,
                        Password,
                        DisplayName,
                        Email,
                        ContactID,
                        IsRecordActive,
                        MustChangePassword,
                        AddedOn,
                        AddedBy,
                        RowVersion};
                rowUserRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUserRow);
                return rowUserRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow FindByUserID(int UserID) {
                return ((UserRow)(this.Rows.Find(new object[] {
                            UserID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UserDataTable cln = ((UserDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UserDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnUserID = base.Columns["UserID"];
                this.columnUserName = base.Columns["UserName"];
                this.columnPassword = base.Columns["Password"];
                this.columnDisplayName = base.Columns["DisplayName"];
                this.columnEmail = base.Columns["Email"];
                this.columnContactID = base.Columns["ContactID"];
                this.columnIsRecordActive = base.Columns["IsRecordActive"];
                this.columnMustChangePassword = base.Columns["MustChangePassword"];
                this.columnAddedOn = base.Columns["AddedOn"];
                this.columnAddedBy = base.Columns["AddedBy"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnUserID = new global::System.Data.DataColumn("UserID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserID);
                this.columnUserName = new global::System.Data.DataColumn("UserName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserName);
                this.columnPassword = new global::System.Data.DataColumn("Password", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.columnDisplayName = new global::System.Data.DataColumn("DisplayName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDisplayName);
                this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnContactID = new global::System.Data.DataColumn("ContactID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContactID);
                this.columnIsRecordActive = new global::System.Data.DataColumn("IsRecordActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsRecordActive);
                this.columnMustChangePassword = new global::System.Data.DataColumn("MustChangePassword", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMustChangePassword);
                this.columnAddedOn = new global::System.Data.DataColumn("AddedOn", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddedOn);
                this.columnAddedBy = new global::System.Data.DataColumn("AddedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddedBy);
                this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ToolSetKey16", new global::System.Data.DataColumn[] {
                                this.columnUserID}, true));
                this.columnUserID.AutoIncrement = true;
                this.columnUserID.AutoIncrementSeed = -1;
                this.columnUserID.AutoIncrementStep = -1;
                this.columnUserID.AllowDBNull = false;
                this.columnUserID.ReadOnly = true;
                this.columnUserID.Unique = true;
                this.columnUserName.AllowDBNull = false;
                this.columnPassword.AllowDBNull = false;
                this.columnDisplayName.DefaultValue = ((string)(""));
                this.columnRowVersion.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow NewUserRow() {
                return ((UserRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UserRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UserRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserRowChanged != null)) {
                    this.UserRowChanged(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserRowChanging != null)) {
                    this.UserRowChanging(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserRowDeleted != null)) {
                    this.UserRowDeleted(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserRowDeleting != null)) {
                    this.UserRowDeleting(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUserRow(UserRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UserDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class BranchDataTable : global::System.Data.TypedTableBase<BranchRow> {
            
            private global::System.Data.DataColumn columnBranchID;
            
            private global::System.Data.DataColumn columnBranchName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BranchDataTable() {
                this.TableName = "Branch";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BranchDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected BranchDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BranchIDColumn {
                get {
                    return this.columnBranchID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BranchNameColumn {
                get {
                    return this.columnBranchName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BranchRow this[int index] {
                get {
                    return ((BranchRow)(this.Rows[index]));
                }
            }
            
            public event BranchRowChangeEventHandler BranchRowChanging;
            
            public event BranchRowChangeEventHandler BranchRowChanged;
            
            public event BranchRowChangeEventHandler BranchRowDeleting;
            
            public event BranchRowChangeEventHandler BranchRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddBranchRow(BranchRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BranchRow AddBranchRow(string BranchName) {
                BranchRow rowBranchRow = ((BranchRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        BranchName};
                rowBranchRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowBranchRow);
                return rowBranchRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BranchRow FindByBranchID(int BranchID) {
                return ((BranchRow)(this.Rows.Find(new object[] {
                            BranchID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                BranchDataTable cln = ((BranchDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new BranchDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnBranchID = base.Columns["BranchID"];
                this.columnBranchName = base.Columns["BranchName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnBranchID = new global::System.Data.DataColumn("BranchID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBranchID);
                this.columnBranchName = new global::System.Data.DataColumn("BranchName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBranchName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ToolSetKey18", new global::System.Data.DataColumn[] {
                                this.columnBranchID}, true));
                this.columnBranchID.AutoIncrement = true;
                this.columnBranchID.AutoIncrementSeed = -1;
                this.columnBranchID.AutoIncrementStep = -1;
                this.columnBranchID.AllowDBNull = false;
                this.columnBranchID.ReadOnly = true;
                this.columnBranchID.Unique = true;
                this.columnBranchName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BranchRow NewBranchRow() {
                return ((BranchRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new BranchRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(BranchRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.BranchRowChanged != null)) {
                    this.BranchRowChanged(this, new BranchRowChangeEvent(((BranchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.BranchRowChanging != null)) {
                    this.BranchRowChanging(this, new BranchRowChangeEvent(((BranchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.BranchRowDeleted != null)) {
                    this.BranchRowDeleted(this, new BranchRowChangeEvent(((BranchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.BranchRowDeleting != null)) {
                    this.BranchRowDeleting(this, new BranchRowChangeEvent(((BranchRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveBranchRow(BranchRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "BranchDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DepartmentDataTable : global::System.Data.TypedTableBase<DepartmentRow> {
            
            private global::System.Data.DataColumn columnDepartmentID;
            
            private global::System.Data.DataColumn columnDepartmentName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentDataTable() {
                this.TableName = "Department";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DepartmentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DepartmentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepartmentIDColumn {
                get {
                    return this.columnDepartmentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DepartmentNameColumn {
                get {
                    return this.columnDepartmentName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentRow this[int index] {
                get {
                    return ((DepartmentRow)(this.Rows[index]));
                }
            }
            
            public event DepartmentRowChangeEventHandler DepartmentRowChanging;
            
            public event DepartmentRowChangeEventHandler DepartmentRowChanged;
            
            public event DepartmentRowChangeEventHandler DepartmentRowDeleting;
            
            public event DepartmentRowChangeEventHandler DepartmentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDepartmentRow(DepartmentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentRow AddDepartmentRow(string DepartmentName) {
                DepartmentRow rowDepartmentRow = ((DepartmentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        DepartmentName};
                rowDepartmentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDepartmentRow);
                return rowDepartmentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentRow FindByDepartmentID(int DepartmentID) {
                return ((DepartmentRow)(this.Rows.Find(new object[] {
                            DepartmentID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DepartmentDataTable cln = ((DepartmentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DepartmentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDepartmentID = base.Columns["DepartmentID"];
                this.columnDepartmentName = base.Columns["DepartmentName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDepartmentID = new global::System.Data.DataColumn("DepartmentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartmentID);
                this.columnDepartmentName = new global::System.Data.DataColumn("DepartmentName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDepartmentName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ToolSetKey19", new global::System.Data.DataColumn[] {
                                this.columnDepartmentID}, true));
                this.columnDepartmentID.AutoIncrement = true;
                this.columnDepartmentID.AutoIncrementSeed = -1;
                this.columnDepartmentID.AutoIncrementStep = -1;
                this.columnDepartmentID.AllowDBNull = false;
                this.columnDepartmentID.ReadOnly = true;
                this.columnDepartmentID.Unique = true;
                this.columnDepartmentName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentRow NewDepartmentRow() {
                return ((DepartmentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DepartmentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DepartmentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DepartmentRowChanged != null)) {
                    this.DepartmentRowChanged(this, new DepartmentRowChangeEvent(((DepartmentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DepartmentRowChanging != null)) {
                    this.DepartmentRowChanging(this, new DepartmentRowChangeEvent(((DepartmentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DepartmentRowDeleted != null)) {
                    this.DepartmentRowDeleted(this, new DepartmentRowChangeEvent(((DepartmentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DepartmentRowDeleting != null)) {
                    this.DepartmentRowDeleting(this, new DepartmentRowChangeEvent(((DepartmentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDepartmentRow(DepartmentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DepartmentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ItinerarySourceDataTable : global::System.Data.TypedTableBase<ItinerarySourceRow> {
            
            private global::System.Data.DataColumn columnItinerarySourceID;
            
            private global::System.Data.DataColumn columnItinerarySourceName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItinerarySourceDataTable() {
                this.TableName = "ItinerarySource";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ItinerarySourceDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ItinerarySourceDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItinerarySourceIDColumn {
                get {
                    return this.columnItinerarySourceID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ItinerarySourceNameColumn {
                get {
                    return this.columnItinerarySourceName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItinerarySourceRow this[int index] {
                get {
                    return ((ItinerarySourceRow)(this.Rows[index]));
                }
            }
            
            public event ItinerarySourceRowChangeEventHandler ItinerarySourceRowChanging;
            
            public event ItinerarySourceRowChangeEventHandler ItinerarySourceRowChanged;
            
            public event ItinerarySourceRowChangeEventHandler ItinerarySourceRowDeleting;
            
            public event ItinerarySourceRowChangeEventHandler ItinerarySourceRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddItinerarySourceRow(ItinerarySourceRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItinerarySourceRow AddItinerarySourceRow(string ItinerarySourceName) {
                ItinerarySourceRow rowItinerarySourceRow = ((ItinerarySourceRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ItinerarySourceName};
                rowItinerarySourceRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowItinerarySourceRow);
                return rowItinerarySourceRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItinerarySourceRow FindByItinerarySourceID(int ItinerarySourceID) {
                return ((ItinerarySourceRow)(this.Rows.Find(new object[] {
                            ItinerarySourceID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ItinerarySourceDataTable cln = ((ItinerarySourceDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ItinerarySourceDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnItinerarySourceID = base.Columns["ItinerarySourceID"];
                this.columnItinerarySourceName = base.Columns["ItinerarySourceName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnItinerarySourceID = new global::System.Data.DataColumn("ItinerarySourceID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItinerarySourceID);
                this.columnItinerarySourceName = new global::System.Data.DataColumn("ItinerarySourceName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItinerarySourceName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ToolSetKey20", new global::System.Data.DataColumn[] {
                                this.columnItinerarySourceID}, true));
                this.columnItinerarySourceID.AutoIncrement = true;
                this.columnItinerarySourceID.AutoIncrementSeed = -1;
                this.columnItinerarySourceID.AutoIncrementStep = -1;
                this.columnItinerarySourceID.AllowDBNull = false;
                this.columnItinerarySourceID.ReadOnly = true;
                this.columnItinerarySourceID.Unique = true;
                this.columnItinerarySourceName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItinerarySourceRow NewItinerarySourceRow() {
                return ((ItinerarySourceRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ItinerarySourceRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ItinerarySourceRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ItinerarySourceRowChanged != null)) {
                    this.ItinerarySourceRowChanged(this, new ItinerarySourceRowChangeEvent(((ItinerarySourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ItinerarySourceRowChanging != null)) {
                    this.ItinerarySourceRowChanging(this, new ItinerarySourceRowChangeEvent(((ItinerarySourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ItinerarySourceRowDeleted != null)) {
                    this.ItinerarySourceRowDeleted(this, new ItinerarySourceRowChangeEvent(((ItinerarySourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ItinerarySourceRowDeleting != null)) {
                    this.ItinerarySourceRowDeleting(this, new ItinerarySourceRowChangeEvent(((ItinerarySourceRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveItinerarySourceRow(ItinerarySourceRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ItinerarySourceDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AppSettingsDataTable : global::System.Data.TypedTableBase<AppSettingsRow> {
            
            private global::System.Data.DataColumn columnAppSettingsID;
            
            private global::System.Data.DataColumn columnInstallID;
            
            private global::System.Data.DataColumn columnInstallName;
            
            private global::System.Data.DataColumn columnVersionNumber;
            
            private global::System.Data.DataColumn columnCurrencyCode;
            
            private global::System.Data.DataColumn columnSupportEmail;
            
            private global::System.Data.DataColumn columnSupportPhone;
            
            private global::System.Data.DataColumn columnSmtpServerName;
            
            private global::System.Data.DataColumn columnSmtpServerPort;
            
            private global::System.Data.DataColumn columnSmtpServerUsername;
            
            private global::System.Data.DataColumn columnSmtpServerPassword;
            
            private global::System.Data.DataColumn columnSmtpServerEnableSsl;
            
            private global::System.Data.DataColumn columnLastDbBackupDate;
            
            private global::System.Data.DataColumn columnLastDbBackupFile;
            
            private global::System.Data.DataColumn columnLastDbBackupName;
            
            private global::System.Data.DataColumn columnExternalFilesPath;
            
            private global::System.Data.DataColumn columnCancelledRequestStatusID;
            
            private global::System.Data.DataColumn columnRowVersion;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AppSettingsDataTable() {
                this.TableName = "AppSettings";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AppSettingsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AppSettingsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppSettingsIDColumn {
                get {
                    return this.columnAppSettingsID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstallIDColumn {
                get {
                    return this.columnInstallID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InstallNameColumn {
                get {
                    return this.columnInstallName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VersionNumberColumn {
                get {
                    return this.columnVersionNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrencyCodeColumn {
                get {
                    return this.columnCurrencyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupportEmailColumn {
                get {
                    return this.columnSupportEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupportPhoneColumn {
                get {
                    return this.columnSupportPhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SmtpServerNameColumn {
                get {
                    return this.columnSmtpServerName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SmtpServerPortColumn {
                get {
                    return this.columnSmtpServerPort;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SmtpServerUsernameColumn {
                get {
                    return this.columnSmtpServerUsername;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SmtpServerPasswordColumn {
                get {
                    return this.columnSmtpServerPassword;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SmtpServerEnableSslColumn {
                get {
                    return this.columnSmtpServerEnableSsl;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastDbBackupDateColumn {
                get {
                    return this.columnLastDbBackupDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastDbBackupFileColumn {
                get {
                    return this.columnLastDbBackupFile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastDbBackupNameColumn {
                get {
                    return this.columnLastDbBackupName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ExternalFilesPathColumn {
                get {
                    return this.columnExternalFilesPath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CancelledRequestStatusIDColumn {
                get {
                    return this.columnCancelledRequestStatusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AppSettingsRow this[int index] {
                get {
                    return ((AppSettingsRow)(this.Rows[index]));
                }
            }
            
            public event AppSettingsRowChangeEventHandler AppSettingsRowChanging;
            
            public event AppSettingsRowChangeEventHandler AppSettingsRowChanged;
            
            public event AppSettingsRowChangeEventHandler AppSettingsRowDeleting;
            
            public event AppSettingsRowChangeEventHandler AppSettingsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAppSettingsRow(AppSettingsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AppSettingsRow AddAppSettingsRow(
                        System.Guid InstallID, 
                        string InstallName, 
                        string VersionNumber, 
                        string CurrencyCode, 
                        string SupportEmail, 
                        string SupportPhone, 
                        string SmtpServerName, 
                        int SmtpServerPort, 
                        string SmtpServerUsername, 
                        string SmtpServerPassword, 
                        bool SmtpServerEnableSsl, 
                        System.DateTime LastDbBackupDate, 
                        string LastDbBackupFile, 
                        string LastDbBackupName, 
                        string ExternalFilesPath, 
                        int CancelledRequestStatusID, 
                        byte[] RowVersion) {
                AppSettingsRow rowAppSettingsRow = ((AppSettingsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        InstallID,
                        InstallName,
                        VersionNumber,
                        CurrencyCode,
                        SupportEmail,
                        SupportPhone,
                        SmtpServerName,
                        SmtpServerPort,
                        SmtpServerUsername,
                        SmtpServerPassword,
                        SmtpServerEnableSsl,
                        LastDbBackupDate,
                        LastDbBackupFile,
                        LastDbBackupName,
                        ExternalFilesPath,
                        CancelledRequestStatusID,
                        RowVersion};
                rowAppSettingsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAppSettingsRow);
                return rowAppSettingsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AppSettingsRow FindByAppSettingsID(int AppSettingsID) {
                return ((AppSettingsRow)(this.Rows.Find(new object[] {
                            AppSettingsID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AppSettingsDataTable cln = ((AppSettingsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AppSettingsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAppSettingsID = base.Columns["AppSettingsID"];
                this.columnInstallID = base.Columns["InstallID"];
                this.columnInstallName = base.Columns["InstallName"];
                this.columnVersionNumber = base.Columns["VersionNumber"];
                this.columnCurrencyCode = base.Columns["CurrencyCode"];
                this.columnSupportEmail = base.Columns["SupportEmail"];
                this.columnSupportPhone = base.Columns["SupportPhone"];
                this.columnSmtpServerName = base.Columns["SmtpServerName"];
                this.columnSmtpServerPort = base.Columns["SmtpServerPort"];
                this.columnSmtpServerUsername = base.Columns["SmtpServerUsername"];
                this.columnSmtpServerPassword = base.Columns["SmtpServerPassword"];
                this.columnSmtpServerEnableSsl = base.Columns["SmtpServerEnableSsl"];
                this.columnLastDbBackupDate = base.Columns["LastDbBackupDate"];
                this.columnLastDbBackupFile = base.Columns["LastDbBackupFile"];
                this.columnLastDbBackupName = base.Columns["LastDbBackupName"];
                this.columnExternalFilesPath = base.Columns["ExternalFilesPath"];
                this.columnCancelledRequestStatusID = base.Columns["CancelledRequestStatusID"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAppSettingsID = new global::System.Data.DataColumn("AppSettingsID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAppSettingsID);
                this.columnInstallID = new global::System.Data.DataColumn("InstallID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstallID);
                this.columnInstallName = new global::System.Data.DataColumn("InstallName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInstallName);
                this.columnVersionNumber = new global::System.Data.DataColumn("VersionNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVersionNumber);
                this.columnCurrencyCode = new global::System.Data.DataColumn("CurrencyCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrencyCode);
                this.columnSupportEmail = new global::System.Data.DataColumn("SupportEmail", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupportEmail);
                this.columnSupportPhone = new global::System.Data.DataColumn("SupportPhone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupportPhone);
                this.columnSmtpServerName = new global::System.Data.DataColumn("SmtpServerName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSmtpServerName);
                this.columnSmtpServerPort = new global::System.Data.DataColumn("SmtpServerPort", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSmtpServerPort);
                this.columnSmtpServerUsername = new global::System.Data.DataColumn("SmtpServerUsername", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSmtpServerUsername);
                this.columnSmtpServerPassword = new global::System.Data.DataColumn("SmtpServerPassword", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSmtpServerPassword);
                this.columnSmtpServerEnableSsl = new global::System.Data.DataColumn("SmtpServerEnableSsl", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSmtpServerEnableSsl);
                this.columnLastDbBackupDate = new global::System.Data.DataColumn("LastDbBackupDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastDbBackupDate);
                this.columnLastDbBackupFile = new global::System.Data.DataColumn("LastDbBackupFile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastDbBackupFile);
                this.columnLastDbBackupName = new global::System.Data.DataColumn("LastDbBackupName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastDbBackupName);
                this.columnExternalFilesPath = new global::System.Data.DataColumn("ExternalFilesPath", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExternalFilesPath);
                this.columnCancelledRequestStatusID = new global::System.Data.DataColumn("CancelledRequestStatusID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCancelledRequestStatusID);
                this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ToolSetKey21", new global::System.Data.DataColumn[] {
                                this.columnAppSettingsID}, true));
                this.columnAppSettingsID.AutoIncrement = true;
                this.columnAppSettingsID.AutoIncrementSeed = -1;
                this.columnAppSettingsID.AutoIncrementStep = -1;
                this.columnAppSettingsID.AllowDBNull = false;
                this.columnAppSettingsID.ReadOnly = true;
                this.columnAppSettingsID.Unique = true;
                this.columnCurrencyCode.MaxLength = 3;
                this.columnSmtpServerPort.DefaultValue = ((int)(25));
                this.columnRowVersion.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AppSettingsRow NewAppSettingsRow() {
                return ((AppSettingsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AppSettingsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AppSettingsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AppSettingsRowChanged != null)) {
                    this.AppSettingsRowChanged(this, new AppSettingsRowChangeEvent(((AppSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AppSettingsRowChanging != null)) {
                    this.AppSettingsRowChanging(this, new AppSettingsRowChangeEvent(((AppSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AppSettingsRowDeleted != null)) {
                    this.AppSettingsRowDeleted(this, new AppSettingsRowChangeEvent(((AppSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AppSettingsRowDeleting != null)) {
                    this.AppSettingsRowDeleting(this, new AppSettingsRowChangeEvent(((AppSettingsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAppSettingsRow(AppSettingsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AppSettingsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AgentDataTable : global::System.Data.TypedTableBase<AgentRow> {
            
            private global::System.Data.DataColumn columnAgentID;
            
            private global::System.Data.DataColumn columnAgentName;
            
            private global::System.Data.DataColumn columnParentAgentID;
            
            private global::System.Data.DataColumn columnAddress1;
            
            private global::System.Data.DataColumn columnAddress2;
            
            private global::System.Data.DataColumn columnAddress3;
            
            private global::System.Data.DataColumn columnPhone;
            
            private global::System.Data.DataColumn columnFax;
            
            private global::System.Data.DataColumn columnEmail;
            
            private global::System.Data.DataColumn columnTaxNumber;
            
            private global::System.Data.DataColumn columnInvoiceNumberMask;
            
            private global::System.Data.DataColumn columnPurchasePaymentTermID;
            
            private global::System.Data.DataColumn columnSalePaymentTermID;
            
            private global::System.Data.DataColumn columnLogoFile;
            
            private global::System.Data.DataColumn columnVoucherLogoFile;
            
            private global::System.Data.DataColumn columnNetComOrMup;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnAgentHeader;
            
            private global::System.Data.DataColumn columnRequestFooter;
            
            private global::System.Data.DataColumn columnConfirmFooter;
            
            private global::System.Data.DataColumn columnRemitFooter;
            
            private global::System.Data.DataColumn columnClientFooter;
            
            private global::System.Data.DataColumn columnVoucherFooter;
            
            private global::System.Data.DataColumn columnIsDefaultAgent;
            
            private global::System.Data.DataColumn columnAddedOn;
            
            private global::System.Data.DataColumn columnAddedBy;
            
            private global::System.Data.DataColumn columnRowVersion;
            
            private global::System.Data.DataColumn columnAgentNameParentName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AgentDataTable() {
                this.TableName = "Agent";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AgentDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AgentDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgentIDColumn {
                get {
                    return this.columnAgentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgentNameColumn {
                get {
                    return this.columnAgentName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParentAgentIDColumn {
                get {
                    return this.columnParentAgentID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address1Column {
                get {
                    return this.columnAddress1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address2Column {
                get {
                    return this.columnAddress2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn Address3Column {
                get {
                    return this.columnAddress3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PhoneColumn {
                get {
                    return this.columnPhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FaxColumn {
                get {
                    return this.columnFax;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxNumberColumn {
                get {
                    return this.columnTaxNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn InvoiceNumberMaskColumn {
                get {
                    return this.columnInvoiceNumberMask;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PurchasePaymentTermIDColumn {
                get {
                    return this.columnPurchasePaymentTermID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SalePaymentTermIDColumn {
                get {
                    return this.columnSalePaymentTermID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogoFileColumn {
                get {
                    return this.columnLogoFile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VoucherLogoFileColumn {
                get {
                    return this.columnVoucherLogoFile;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NetComOrMupColumn {
                get {
                    return this.columnNetComOrMup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgentHeaderColumn {
                get {
                    return this.columnAgentHeader;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequestFooterColumn {
                get {
                    return this.columnRequestFooter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConfirmFooterColumn {
                get {
                    return this.columnConfirmFooter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RemitFooterColumn {
                get {
                    return this.columnRemitFooter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientFooterColumn {
                get {
                    return this.columnClientFooter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VoucherFooterColumn {
                get {
                    return this.columnVoucherFooter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDefaultAgentColumn {
                get {
                    return this.columnIsDefaultAgent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddedOnColumn {
                get {
                    return this.columnAddedOn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AddedByColumn {
                get {
                    return this.columnAddedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AgentNameParentNameColumn {
                get {
                    return this.columnAgentNameParentName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AgentRow this[int index] {
                get {
                    return ((AgentRow)(this.Rows[index]));
                }
            }
            
            public event AgentRowChangeEventHandler AgentRowChanging;
            
            public event AgentRowChangeEventHandler AgentRowChanged;
            
            public event AgentRowChangeEventHandler AgentRowDeleting;
            
            public event AgentRowChangeEventHandler AgentRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAgentRow(AgentRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AgentRow AddAgentRow(
                        string AgentName, 
                        int ParentAgentID, 
                        string Address1, 
                        string Address2, 
                        string Address3, 
                        string Phone, 
                        string Fax, 
                        string Email, 
                        string TaxNumber, 
                        string InvoiceNumberMask, 
                        int PurchasePaymentTermID, 
                        int SalePaymentTermID, 
                        string LogoFile, 
                        string VoucherLogoFile, 
                        string NetComOrMup, 
                        string Comments, 
                        string AgentHeader, 
                        string RequestFooter, 
                        string ConfirmFooter, 
                        string RemitFooter, 
                        string ClientFooter, 
                        string VoucherFooter, 
                        bool IsDefaultAgent, 
                        System.DateTime AddedOn, 
                        int AddedBy, 
                        byte[] RowVersion, 
                        string AgentNameParentName) {
                AgentRow rowAgentRow = ((AgentRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        AgentName,
                        ParentAgentID,
                        Address1,
                        Address2,
                        Address3,
                        Phone,
                        Fax,
                        Email,
                        TaxNumber,
                        InvoiceNumberMask,
                        PurchasePaymentTermID,
                        SalePaymentTermID,
                        LogoFile,
                        VoucherLogoFile,
                        NetComOrMup,
                        Comments,
                        AgentHeader,
                        RequestFooter,
                        ConfirmFooter,
                        RemitFooter,
                        ClientFooter,
                        VoucherFooter,
                        IsDefaultAgent,
                        AddedOn,
                        AddedBy,
                        RowVersion,
                        AgentNameParentName};
                rowAgentRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAgentRow);
                return rowAgentRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AgentRow FindByAgentID(int AgentID) {
                return ((AgentRow)(this.Rows.Find(new object[] {
                            AgentID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AgentDataTable cln = ((AgentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AgentDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAgentID = base.Columns["AgentID"];
                this.columnAgentName = base.Columns["AgentName"];
                this.columnParentAgentID = base.Columns["ParentAgentID"];
                this.columnAddress1 = base.Columns["Address1"];
                this.columnAddress2 = base.Columns["Address2"];
                this.columnAddress3 = base.Columns["Address3"];
                this.columnPhone = base.Columns["Phone"];
                this.columnFax = base.Columns["Fax"];
                this.columnEmail = base.Columns["Email"];
                this.columnTaxNumber = base.Columns["TaxNumber"];
                this.columnInvoiceNumberMask = base.Columns["InvoiceNumberMask"];
                this.columnPurchasePaymentTermID = base.Columns["PurchasePaymentTermID"];
                this.columnSalePaymentTermID = base.Columns["SalePaymentTermID"];
                this.columnLogoFile = base.Columns["LogoFile"];
                this.columnVoucherLogoFile = base.Columns["VoucherLogoFile"];
                this.columnNetComOrMup = base.Columns["NetComOrMup"];
                this.columnComments = base.Columns["Comments"];
                this.columnAgentHeader = base.Columns["AgentHeader"];
                this.columnRequestFooter = base.Columns["RequestFooter"];
                this.columnConfirmFooter = base.Columns["ConfirmFooter"];
                this.columnRemitFooter = base.Columns["RemitFooter"];
                this.columnClientFooter = base.Columns["ClientFooter"];
                this.columnVoucherFooter = base.Columns["VoucherFooter"];
                this.columnIsDefaultAgent = base.Columns["IsDefaultAgent"];
                this.columnAddedOn = base.Columns["AddedOn"];
                this.columnAddedBy = base.Columns["AddedBy"];
                this.columnRowVersion = base.Columns["RowVersion"];
                this.columnAgentNameParentName = base.Columns["AgentNameParentName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAgentID = new global::System.Data.DataColumn("AgentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgentID);
                this.columnAgentName = new global::System.Data.DataColumn("AgentName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgentName);
                this.columnParentAgentID = new global::System.Data.DataColumn("ParentAgentID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParentAgentID);
                this.columnAddress1 = new global::System.Data.DataColumn("Address1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress1);
                this.columnAddress2 = new global::System.Data.DataColumn("Address2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress2);
                this.columnAddress3 = new global::System.Data.DataColumn("Address3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddress3);
                this.columnPhone = new global::System.Data.DataColumn("Phone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPhone);
                this.columnFax = new global::System.Data.DataColumn("Fax", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFax);
                this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnTaxNumber = new global::System.Data.DataColumn("TaxNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxNumber);
                this.columnInvoiceNumberMask = new global::System.Data.DataColumn("InvoiceNumberMask", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnInvoiceNumberMask);
                this.columnPurchasePaymentTermID = new global::System.Data.DataColumn("PurchasePaymentTermID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPurchasePaymentTermID);
                this.columnSalePaymentTermID = new global::System.Data.DataColumn("SalePaymentTermID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSalePaymentTermID);
                this.columnLogoFile = new global::System.Data.DataColumn("LogoFile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogoFile);
                this.columnVoucherLogoFile = new global::System.Data.DataColumn("VoucherLogoFile", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVoucherLogoFile);
                this.columnNetComOrMup = new global::System.Data.DataColumn("NetComOrMup", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNetComOrMup);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnAgentHeader = new global::System.Data.DataColumn("AgentHeader", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgentHeader);
                this.columnRequestFooter = new global::System.Data.DataColumn("RequestFooter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequestFooter);
                this.columnConfirmFooter = new global::System.Data.DataColumn("ConfirmFooter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConfirmFooter);
                this.columnRemitFooter = new global::System.Data.DataColumn("RemitFooter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRemitFooter);
                this.columnClientFooter = new global::System.Data.DataColumn("ClientFooter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientFooter);
                this.columnVoucherFooter = new global::System.Data.DataColumn("VoucherFooter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVoucherFooter);
                this.columnIsDefaultAgent = new global::System.Data.DataColumn("IsDefaultAgent", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDefaultAgent);
                this.columnAddedOn = new global::System.Data.DataColumn("AddedOn", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddedOn);
                this.columnAddedBy = new global::System.Data.DataColumn("AddedBy", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAddedBy);
                this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.columnAgentNameParentName = new global::System.Data.DataColumn("AgentNameParentName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAgentNameParentName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ToolSetKey17", new global::System.Data.DataColumn[] {
                                this.columnAgentID}, true));
                this.columnAgentID.AutoIncrement = true;
                this.columnAgentID.AutoIncrementSeed = -1;
                this.columnAgentID.AutoIncrementStep = -1;
                this.columnAgentID.AllowDBNull = false;
                this.columnAgentID.ReadOnly = true;
                this.columnAgentID.Unique = true;
                this.columnAgentName.AllowDBNull = false;
                this.columnRowVersion.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AgentRow NewAgentRow() {
                return ((AgentRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AgentRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AgentRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AgentRowChanged != null)) {
                    this.AgentRowChanged(this, new AgentRowChangeEvent(((AgentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AgentRowChanging != null)) {
                    this.AgentRowChanging(this, new AgentRowChangeEvent(((AgentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AgentRowDeleted != null)) {
                    this.AgentRowDeleted(this, new AgentRowChangeEvent(((AgentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AgentRowDeleting != null)) {
                    this.AgentRowDeleting(this, new AgentRowChangeEvent(((AgentRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAgentRow(AgentRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AgentDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SupplierConfigTypeDataTable : global::System.Data.TypedTableBase<SupplierConfigTypeRow> {
            
            private global::System.Data.DataColumn columnSupplierConfigTypeID;
            
            private global::System.Data.DataColumn columnSupplierConfigTypeName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SupplierConfigTypeDataTable() {
                this.TableName = "SupplierConfigType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SupplierConfigTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SupplierConfigTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupplierConfigTypeIDColumn {
                get {
                    return this.columnSupplierConfigTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SupplierConfigTypeNameColumn {
                get {
                    return this.columnSupplierConfigTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SupplierConfigTypeRow this[int index] {
                get {
                    return ((SupplierConfigTypeRow)(this.Rows[index]));
                }
            }
            
            public event SupplierConfigTypeRowChangeEventHandler SupplierConfigTypeRowChanging;
            
            public event SupplierConfigTypeRowChangeEventHandler SupplierConfigTypeRowChanged;
            
            public event SupplierConfigTypeRowChangeEventHandler SupplierConfigTypeRowDeleting;
            
            public event SupplierConfigTypeRowChangeEventHandler SupplierConfigTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSupplierConfigTypeRow(SupplierConfigTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SupplierConfigTypeRow AddSupplierConfigTypeRow(string SupplierConfigTypeName) {
                SupplierConfigTypeRow rowSupplierConfigTypeRow = ((SupplierConfigTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        SupplierConfigTypeName};
                rowSupplierConfigTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSupplierConfigTypeRow);
                return rowSupplierConfigTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SupplierConfigTypeRow FindBySupplierConfigTypeID(int SupplierConfigTypeID) {
                return ((SupplierConfigTypeRow)(this.Rows.Find(new object[] {
                            SupplierConfigTypeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SupplierConfigTypeDataTable cln = ((SupplierConfigTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SupplierConfigTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSupplierConfigTypeID = base.Columns["SupplierConfigTypeID"];
                this.columnSupplierConfigTypeName = base.Columns["SupplierConfigTypeName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSupplierConfigTypeID = new global::System.Data.DataColumn("SupplierConfigTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierConfigTypeID);
                this.columnSupplierConfigTypeName = new global::System.Data.DataColumn("SupplierConfigTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSupplierConfigTypeName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ToolSetKey4", new global::System.Data.DataColumn[] {
                                this.columnSupplierConfigTypeID}, true));
                this.columnSupplierConfigTypeID.AutoIncrement = true;
                this.columnSupplierConfigTypeID.AutoIncrementSeed = -1;
                this.columnSupplierConfigTypeID.AutoIncrementStep = -1;
                this.columnSupplierConfigTypeID.AllowDBNull = false;
                this.columnSupplierConfigTypeID.ReadOnly = true;
                this.columnSupplierConfigTypeID.Unique = true;
                this.columnSupplierConfigTypeName.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SupplierConfigTypeRow NewSupplierConfigTypeRow() {
                return ((SupplierConfigTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SupplierConfigTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SupplierConfigTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SupplierConfigTypeRowChanged != null)) {
                    this.SupplierConfigTypeRowChanged(this, new SupplierConfigTypeRowChangeEvent(((SupplierConfigTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SupplierConfigTypeRowChanging != null)) {
                    this.SupplierConfigTypeRowChanging(this, new SupplierConfigTypeRowChangeEvent(((SupplierConfigTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SupplierConfigTypeRowDeleted != null)) {
                    this.SupplierConfigTypeRowDeleted(this, new SupplierConfigTypeRowChangeEvent(((SupplierConfigTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SupplierConfigTypeRowDeleting != null)) {
                    this.SupplierConfigTypeRowDeleting(this, new SupplierConfigTypeRowChangeEvent(((SupplierConfigTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSupplierConfigTypeRow(SupplierConfigTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SupplierConfigTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MenuTypeDataTable : global::System.Data.TypedTableBase<MenuTypeRow> {
            
            private global::System.Data.DataColumn columnMenuTypeID;
            
            private global::System.Data.DataColumn columnMenuTypeName;
            
            private global::System.Data.DataColumn columnRowVersion;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MenuTypeDataTable() {
                this.TableName = "MenuType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MenuTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MenuTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MenuTypeIDColumn {
                get {
                    return this.columnMenuTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MenuTypeNameColumn {
                get {
                    return this.columnMenuTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MenuTypeRow this[int index] {
                get {
                    return ((MenuTypeRow)(this.Rows[index]));
                }
            }
            
            public event MenuTypeRowChangeEventHandler MenuTypeRowChanging;
            
            public event MenuTypeRowChangeEventHandler MenuTypeRowChanged;
            
            public event MenuTypeRowChangeEventHandler MenuTypeRowDeleting;
            
            public event MenuTypeRowChangeEventHandler MenuTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMenuTypeRow(MenuTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MenuTypeRow AddMenuTypeRow(string MenuTypeName, byte[] RowVersion) {
                MenuTypeRow rowMenuTypeRow = ((MenuTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        MenuTypeName,
                        RowVersion};
                rowMenuTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMenuTypeRow);
                return rowMenuTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MenuTypeRow FindByMenuTypeID(int MenuTypeID) {
                return ((MenuTypeRow)(this.Rows.Find(new object[] {
                            MenuTypeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MenuTypeDataTable cln = ((MenuTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MenuTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMenuTypeID = base.Columns["MenuTypeID"];
                this.columnMenuTypeName = base.Columns["MenuTypeName"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMenuTypeID = new global::System.Data.DataColumn("MenuTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMenuTypeID);
                this.columnMenuTypeName = new global::System.Data.DataColumn("MenuTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMenuTypeName);
                this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ToolSetKey22", new global::System.Data.DataColumn[] {
                                this.columnMenuTypeID}, true));
                this.columnMenuTypeID.AutoIncrement = true;
                this.columnMenuTypeID.AllowDBNull = false;
                this.columnMenuTypeID.ReadOnly = true;
                this.columnMenuTypeID.Unique = true;
                this.columnRowVersion.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MenuTypeRow NewMenuTypeRow() {
                return ((MenuTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MenuTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MenuTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MenuTypeRowChanged != null)) {
                    this.MenuTypeRowChanged(this, new MenuTypeRowChangeEvent(((MenuTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MenuTypeRowChanging != null)) {
                    this.MenuTypeRowChanging(this, new MenuTypeRowChangeEvent(((MenuTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MenuTypeRowDeleted != null)) {
                    this.MenuTypeRowDeleted(this, new MenuTypeRowChangeEvent(((MenuTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MenuTypeRowDeleting != null)) {
                    this.MenuTypeRowDeleting(this, new MenuTypeRowChangeEvent(((MenuTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMenuTypeRow(MenuTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MenuTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PaymentTypeDataTable : global::System.Data.TypedTableBase<PaymentTypeRow> {
            
            private global::System.Data.DataColumn columnPaymentTypeID;
            
            private global::System.Data.DataColumn columnPaymentTypeName;
            
            private global::System.Data.DataColumn columnAccountingCategoryID;
            
            private global::System.Data.DataColumn columnTaxTypeID;
            
            private global::System.Data.DataColumn columnIsDefault;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentTypeDataTable() {
                this.TableName = "PaymentType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PaymentTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PaymentTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentTypeIDColumn {
                get {
                    return this.columnPaymentTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentTypeNameColumn {
                get {
                    return this.columnPaymentTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountingCategoryIDColumn {
                get {
                    return this.columnAccountingCategoryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxTypeIDColumn {
                get {
                    return this.columnTaxTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDefaultColumn {
                get {
                    return this.columnIsDefault;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentTypeRow this[int index] {
                get {
                    return ((PaymentTypeRow)(this.Rows[index]));
                }
            }
            
            public event PaymentTypeRowChangeEventHandler PaymentTypeRowChanging;
            
            public event PaymentTypeRowChangeEventHandler PaymentTypeRowChanged;
            
            public event PaymentTypeRowChangeEventHandler PaymentTypeRowDeleting;
            
            public event PaymentTypeRowChangeEventHandler PaymentTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPaymentTypeRow(PaymentTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentTypeRow AddPaymentTypeRow(string PaymentTypeName, int AccountingCategoryID, int TaxTypeID, bool IsDefault) {
                PaymentTypeRow rowPaymentTypeRow = ((PaymentTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PaymentTypeName,
                        AccountingCategoryID,
                        TaxTypeID,
                        IsDefault};
                rowPaymentTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPaymentTypeRow);
                return rowPaymentTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentTypeRow FindByPaymentTypeID(int PaymentTypeID) {
                return ((PaymentTypeRow)(this.Rows.Find(new object[] {
                            PaymentTypeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PaymentTypeDataTable cln = ((PaymentTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PaymentTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPaymentTypeID = base.Columns["PaymentTypeID"];
                this.columnPaymentTypeName = base.Columns["PaymentTypeName"];
                this.columnAccountingCategoryID = base.Columns["AccountingCategoryID"];
                this.columnTaxTypeID = base.Columns["TaxTypeID"];
                this.columnIsDefault = base.Columns["IsDefault"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPaymentTypeID = new global::System.Data.DataColumn("PaymentTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentTypeID);
                this.columnPaymentTypeName = new global::System.Data.DataColumn("PaymentTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentTypeName);
                this.columnAccountingCategoryID = new global::System.Data.DataColumn("AccountingCategoryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountingCategoryID);
                this.columnTaxTypeID = new global::System.Data.DataColumn("TaxTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxTypeID);
                this.columnIsDefault = new global::System.Data.DataColumn("IsDefault", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDefault);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPaymentTypeID}, true));
                this.columnPaymentTypeID.AutoIncrement = true;
                this.columnPaymentTypeID.AutoIncrementSeed = -1;
                this.columnPaymentTypeID.AutoIncrementStep = -1;
                this.columnPaymentTypeID.AllowDBNull = false;
                this.columnPaymentTypeID.ReadOnly = true;
                this.columnPaymentTypeID.Unique = true;
                this.columnPaymentTypeName.AllowDBNull = false;
                this.columnPaymentTypeName.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentTypeRow NewPaymentTypeRow() {
                return ((PaymentTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PaymentTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PaymentTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PaymentTypeRowChanged != null)) {
                    this.PaymentTypeRowChanged(this, new PaymentTypeRowChangeEvent(((PaymentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PaymentTypeRowChanging != null)) {
                    this.PaymentTypeRowChanging(this, new PaymentTypeRowChangeEvent(((PaymentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PaymentTypeRowDeleted != null)) {
                    this.PaymentTypeRowDeleted(this, new PaymentTypeRowChangeEvent(((PaymentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PaymentTypeRowDeleting != null)) {
                    this.PaymentTypeRowDeleting(this, new PaymentTypeRowChangeEvent(((PaymentTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePaymentTypeRow(PaymentTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PaymentTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CurrencyDataTable : global::System.Data.TypedTableBase<CurrencyRow> {
            
            private global::System.Data.DataColumn columnCurrencyCode;
            
            private global::System.Data.DataColumn columnCurrencyName;
            
            private global::System.Data.DataColumn columnSymbol;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrencyDataTable() {
                this.TableName = "Currency";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CurrencyDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CurrencyDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrencyCodeColumn {
                get {
                    return this.columnCurrencyCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrencyNameColumn {
                get {
                    return this.columnCurrencyName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SymbolColumn {
                get {
                    return this.columnSymbol;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrencyRow this[int index] {
                get {
                    return ((CurrencyRow)(this.Rows[index]));
                }
            }
            
            public event CurrencyRowChangeEventHandler CurrencyRowChanging;
            
            public event CurrencyRowChangeEventHandler CurrencyRowChanged;
            
            public event CurrencyRowChangeEventHandler CurrencyRowDeleting;
            
            public event CurrencyRowChangeEventHandler CurrencyRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCurrencyRow(CurrencyRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrencyRow AddCurrencyRow(string CurrencyCode, string CurrencyName, string Symbol) {
                CurrencyRow rowCurrencyRow = ((CurrencyRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CurrencyCode,
                        CurrencyName,
                        Symbol};
                rowCurrencyRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCurrencyRow);
                return rowCurrencyRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrencyRow FindByCurrencyCode(string CurrencyCode) {
                return ((CurrencyRow)(this.Rows.Find(new object[] {
                            CurrencyCode})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CurrencyDataTable cln = ((CurrencyDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CurrencyDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCurrencyCode = base.Columns["CurrencyCode"];
                this.columnCurrencyName = base.Columns["CurrencyName"];
                this.columnSymbol = base.Columns["Symbol"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCurrencyCode = new global::System.Data.DataColumn("CurrencyCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrencyCode);
                this.columnCurrencyName = new global::System.Data.DataColumn("CurrencyName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrencyName);
                this.columnSymbol = new global::System.Data.DataColumn("Symbol", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSymbol);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCurrencyCode}, true));
                this.columnCurrencyCode.AllowDBNull = false;
                this.columnCurrencyCode.Unique = true;
                this.columnCurrencyCode.MaxLength = 3;
                this.columnCurrencyName.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrencyRow NewCurrencyRow() {
                return ((CurrencyRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CurrencyRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CurrencyRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CurrencyRowChanged != null)) {
                    this.CurrencyRowChanged(this, new CurrencyRowChangeEvent(((CurrencyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CurrencyRowChanging != null)) {
                    this.CurrencyRowChanging(this, new CurrencyRowChangeEvent(((CurrencyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CurrencyRowDeleted != null)) {
                    this.CurrencyRowDeleted(this, new CurrencyRowChangeEvent(((CurrencyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CurrencyRowDeleting != null)) {
                    this.CurrencyRowDeleting(this, new CurrencyRowChangeEvent(((CurrencyRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCurrencyRow(CurrencyRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CurrencyDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TaxTypeDataTable : global::System.Data.TypedTableBase<TaxTypeRow> {
            
            private global::System.Data.DataColumn columnTaxTypeID;
            
            private global::System.Data.DataColumn columnTaxTypeName;
            
            private global::System.Data.DataColumn columnTaxTypeCode;
            
            private global::System.Data.DataColumn columnAmount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxTypeDataTable() {
                this.TableName = "TaxType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TaxTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TaxTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxTypeIDColumn {
                get {
                    return this.columnTaxTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxTypeNameColumn {
                get {
                    return this.columnTaxTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TaxTypeCodeColumn {
                get {
                    return this.columnTaxTypeCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AmountColumn {
                get {
                    return this.columnAmount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxTypeRow this[int index] {
                get {
                    return ((TaxTypeRow)(this.Rows[index]));
                }
            }
            
            public event TaxTypeRowChangeEventHandler TaxTypeRowChanging;
            
            public event TaxTypeRowChangeEventHandler TaxTypeRowChanged;
            
            public event TaxTypeRowChangeEventHandler TaxTypeRowDeleting;
            
            public event TaxTypeRowChangeEventHandler TaxTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTaxTypeRow(TaxTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxTypeRow AddTaxTypeRow(string TaxTypeName, string TaxTypeCode, decimal Amount) {
                TaxTypeRow rowTaxTypeRow = ((TaxTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        TaxTypeName,
                        TaxTypeCode,
                        Amount};
                rowTaxTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTaxTypeRow);
                return rowTaxTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxTypeRow FindByTaxTypeID(int TaxTypeID) {
                return ((TaxTypeRow)(this.Rows.Find(new object[] {
                            TaxTypeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TaxTypeDataTable cln = ((TaxTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TaxTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTaxTypeID = base.Columns["TaxTypeID"];
                this.columnTaxTypeName = base.Columns["TaxTypeName"];
                this.columnTaxTypeCode = base.Columns["TaxTypeCode"];
                this.columnAmount = base.Columns["Amount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTaxTypeID = new global::System.Data.DataColumn("TaxTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxTypeID);
                this.columnTaxTypeName = new global::System.Data.DataColumn("TaxTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxTypeName);
                this.columnTaxTypeCode = new global::System.Data.DataColumn("TaxTypeCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTaxTypeCode);
                this.columnAmount = new global::System.Data.DataColumn("Amount", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAmount);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTaxTypeID}, true));
                this.columnTaxTypeID.AutoIncrement = true;
                this.columnTaxTypeID.AutoIncrementSeed = -1;
                this.columnTaxTypeID.AutoIncrementStep = -1;
                this.columnTaxTypeID.AllowDBNull = false;
                this.columnTaxTypeID.ReadOnly = true;
                this.columnTaxTypeID.Unique = true;
                this.columnTaxTypeCode.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxTypeRow NewTaxTypeRow() {
                return ((TaxTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TaxTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TaxTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TaxTypeRowChanged != null)) {
                    this.TaxTypeRowChanged(this, new TaxTypeRowChangeEvent(((TaxTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TaxTypeRowChanging != null)) {
                    this.TaxTypeRowChanging(this, new TaxTypeRowChangeEvent(((TaxTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TaxTypeRowDeleted != null)) {
                    this.TaxTypeRowDeleted(this, new TaxTypeRowChangeEvent(((TaxTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TaxTypeRowDeleting != null)) {
                    this.TaxTypeRowDeleting(this, new TaxTypeRowChangeEvent(((TaxTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTaxTypeRow(TaxTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TaxTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PaymentDueDataTable : global::System.Data.TypedTableBase<PaymentDueRow> {
            
            private global::System.Data.DataColumn columnPaymentDueID;
            
            private global::System.Data.DataColumn columnPaymentDueName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentDueDataTable() {
                this.TableName = "PaymentDue";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PaymentDueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PaymentDueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentDueIDColumn {
                get {
                    return this.columnPaymentDueID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PaymentDueNameColumn {
                get {
                    return this.columnPaymentDueName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentDueRow this[int index] {
                get {
                    return ((PaymentDueRow)(this.Rows[index]));
                }
            }
            
            public event PaymentDueRowChangeEventHandler PaymentDueRowChanging;
            
            public event PaymentDueRowChangeEventHandler PaymentDueRowChanged;
            
            public event PaymentDueRowChangeEventHandler PaymentDueRowDeleting;
            
            public event PaymentDueRowChangeEventHandler PaymentDueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPaymentDueRow(PaymentDueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentDueRow AddPaymentDueRow(string PaymentDueName) {
                PaymentDueRow rowPaymentDueRow = ((PaymentDueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        PaymentDueName};
                rowPaymentDueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPaymentDueRow);
                return rowPaymentDueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentDueRow FindByPaymentDueID(int PaymentDueID) {
                return ((PaymentDueRow)(this.Rows.Find(new object[] {
                            PaymentDueID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PaymentDueDataTable cln = ((PaymentDueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PaymentDueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPaymentDueID = base.Columns["PaymentDueID"];
                this.columnPaymentDueName = base.Columns["PaymentDueName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPaymentDueID = new global::System.Data.DataColumn("PaymentDueID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentDueID);
                this.columnPaymentDueName = new global::System.Data.DataColumn("PaymentDueName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPaymentDueName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnPaymentDueID}, true));
                this.columnPaymentDueID.AutoIncrement = true;
                this.columnPaymentDueID.AutoIncrementSeed = -1;
                this.columnPaymentDueID.AutoIncrementStep = -1;
                this.columnPaymentDueID.AllowDBNull = false;
                this.columnPaymentDueID.ReadOnly = true;
                this.columnPaymentDueID.Unique = true;
                this.columnPaymentDueName.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentDueRow NewPaymentDueRow() {
                return ((PaymentDueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PaymentDueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PaymentDueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PaymentDueRowChanged != null)) {
                    this.PaymentDueRowChanged(this, new PaymentDueRowChangeEvent(((PaymentDueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PaymentDueRowChanging != null)) {
                    this.PaymentDueRowChanging(this, new PaymentDueRowChangeEvent(((PaymentDueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PaymentDueRowDeleted != null)) {
                    this.PaymentDueRowDeleted(this, new PaymentDueRowChangeEvent(((PaymentDueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PaymentDueRowDeleting != null)) {
                    this.PaymentDueRowDeleting(this, new PaymentDueRowChangeEvent(((PaymentDueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePaymentDueRow(PaymentDueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PaymentDueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AccountingCategoryDataTable : global::System.Data.TypedTableBase<AccountingCategoryRow> {
            
            private global::System.Data.DataColumn columnAccountingCategoryID;
            
            private global::System.Data.DataColumn columnAccountingCategoryCode;
            
            private global::System.Data.DataColumn columnAccountingCategoryName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountingCategoryDataTable() {
                this.TableName = "AccountingCategory";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AccountingCategoryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AccountingCategoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountingCategoryIDColumn {
                get {
                    return this.columnAccountingCategoryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountingCategoryCodeColumn {
                get {
                    return this.columnAccountingCategoryCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AccountingCategoryNameColumn {
                get {
                    return this.columnAccountingCategoryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountingCategoryRow this[int index] {
                get {
                    return ((AccountingCategoryRow)(this.Rows[index]));
                }
            }
            
            public event AccountingCategoryRowChangeEventHandler AccountingCategoryRowChanging;
            
            public event AccountingCategoryRowChangeEventHandler AccountingCategoryRowChanged;
            
            public event AccountingCategoryRowChangeEventHandler AccountingCategoryRowDeleting;
            
            public event AccountingCategoryRowChangeEventHandler AccountingCategoryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAccountingCategoryRow(AccountingCategoryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountingCategoryRow AddAccountingCategoryRow(string AccountingCategoryCode, string AccountingCategoryName) {
                AccountingCategoryRow rowAccountingCategoryRow = ((AccountingCategoryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        AccountingCategoryCode,
                        AccountingCategoryName};
                rowAccountingCategoryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAccountingCategoryRow);
                return rowAccountingCategoryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountingCategoryRow FindByAccountingCategoryID(int AccountingCategoryID) {
                return ((AccountingCategoryRow)(this.Rows.Find(new object[] {
                            AccountingCategoryID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AccountingCategoryDataTable cln = ((AccountingCategoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AccountingCategoryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnAccountingCategoryID = base.Columns["AccountingCategoryID"];
                this.columnAccountingCategoryCode = base.Columns["AccountingCategoryCode"];
                this.columnAccountingCategoryName = base.Columns["AccountingCategoryName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnAccountingCategoryID = new global::System.Data.DataColumn("AccountingCategoryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountingCategoryID);
                this.columnAccountingCategoryCode = new global::System.Data.DataColumn("AccountingCategoryCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountingCategoryCode);
                this.columnAccountingCategoryName = new global::System.Data.DataColumn("AccountingCategoryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAccountingCategoryName);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnAccountingCategoryID}, true));
                this.columnAccountingCategoryID.AutoIncrement = true;
                this.columnAccountingCategoryID.AutoIncrementSeed = -1;
                this.columnAccountingCategoryID.AutoIncrementStep = -1;
                this.columnAccountingCategoryID.AllowDBNull = false;
                this.columnAccountingCategoryID.ReadOnly = true;
                this.columnAccountingCategoryID.Unique = true;
                this.columnAccountingCategoryCode.MaxLength = 50;
                this.columnAccountingCategoryName.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountingCategoryRow NewAccountingCategoryRow() {
                return ((AccountingCategoryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AccountingCategoryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AccountingCategoryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AccountingCategoryRowChanged != null)) {
                    this.AccountingCategoryRowChanged(this, new AccountingCategoryRowChangeEvent(((AccountingCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AccountingCategoryRowChanging != null)) {
                    this.AccountingCategoryRowChanging(this, new AccountingCategoryRowChangeEvent(((AccountingCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AccountingCategoryRowDeleted != null)) {
                    this.AccountingCategoryRowDeleted(this, new AccountingCategoryRowChangeEvent(((AccountingCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AccountingCategoryRowDeleting != null)) {
                    this.AccountingCategoryRowDeleting(this, new AccountingCategoryRowChangeEvent(((AccountingCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAccountingCategoryRow(AccountingCategoryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AccountingCategoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ContactCategoryDataTable : global::System.Data.TypedTableBase<ContactCategoryRow> {
            
            private global::System.Data.DataColumn columnContactCategoryID;
            
            private global::System.Data.DataColumn columnContactCategoryName;
            
            private global::System.Data.DataColumn columnIsDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContactCategoryDataTable() {
                this.TableName = "ContactCategory";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ContactCategoryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ContactCategoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContactCategoryIDColumn {
                get {
                    return this.columnContactCategoryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContactCategoryNameColumn {
                get {
                    return this.columnContactCategoryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsDeletedColumn {
                get {
                    return this.columnIsDeleted;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContactCategoryRow this[int index] {
                get {
                    return ((ContactCategoryRow)(this.Rows[index]));
                }
            }
            
            public event ContactCategoryRowChangeEventHandler ContactCategoryRowChanging;
            
            public event ContactCategoryRowChangeEventHandler ContactCategoryRowChanged;
            
            public event ContactCategoryRowChangeEventHandler ContactCategoryRowDeleting;
            
            public event ContactCategoryRowChangeEventHandler ContactCategoryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddContactCategoryRow(ContactCategoryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContactCategoryRow AddContactCategoryRow(string ContactCategoryName, bool IsDeleted) {
                ContactCategoryRow rowContactCategoryRow = ((ContactCategoryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ContactCategoryName,
                        IsDeleted};
                rowContactCategoryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowContactCategoryRow);
                return rowContactCategoryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContactCategoryRow FindByContactCategoryID(int ContactCategoryID) {
                return ((ContactCategoryRow)(this.Rows.Find(new object[] {
                            ContactCategoryID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ContactCategoryDataTable cln = ((ContactCategoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ContactCategoryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnContactCategoryID = base.Columns["ContactCategoryID"];
                this.columnContactCategoryName = base.Columns["ContactCategoryName"];
                this.columnIsDeleted = base.Columns["IsDeleted"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnContactCategoryID = new global::System.Data.DataColumn("ContactCategoryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContactCategoryID);
                this.columnContactCategoryName = new global::System.Data.DataColumn("ContactCategoryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContactCategoryName);
                this.columnIsDeleted = new global::System.Data.DataColumn("IsDeleted", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsDeleted);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnContactCategoryID}, true));
                this.columnContactCategoryID.AutoIncrement = true;
                this.columnContactCategoryID.AutoIncrementSeed = -1;
                this.columnContactCategoryID.AutoIncrementStep = -1;
                this.columnContactCategoryID.AllowDBNull = false;
                this.columnContactCategoryID.Unique = true;
                this.columnContactCategoryName.DefaultValue = ((string)(""));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContactCategoryRow NewContactCategoryRow() {
                return ((ContactCategoryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ContactCategoryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ContactCategoryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ContactCategoryRowChanged != null)) {
                    this.ContactCategoryRowChanged(this, new ContactCategoryRowChangeEvent(((ContactCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ContactCategoryRowChanging != null)) {
                    this.ContactCategoryRowChanging(this, new ContactCategoryRowChangeEvent(((ContactCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ContactCategoryRowDeleted != null)) {
                    this.ContactCategoryRowDeleted(this, new ContactCategoryRowChangeEvent(((ContactCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ContactCategoryRowDeleting != null)) {
                    this.ContactCategoryRowDeleting(this, new ContactCategoryRowChangeEvent(((ContactCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveContactCategoryRow(ContactCategoryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ContactCategoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class OptionTypeDataTable : global::System.Data.TypedTableBase<OptionTypeRow> {
            
            private global::System.Data.DataColumn columnOptionTypeID;
            
            private global::System.Data.DataColumn columnOptionTypeName;
            
            private global::System.Data.DataColumn columnDivisor;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OptionTypeDataTable() {
                this.TableName = "OptionType";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OptionTypeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected OptionTypeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OptionTypeIDColumn {
                get {
                    return this.columnOptionTypeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OptionTypeNameColumn {
                get {
                    return this.columnOptionTypeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DivisorColumn {
                get {
                    return this.columnDivisor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OptionTypeRow this[int index] {
                get {
                    return ((OptionTypeRow)(this.Rows[index]));
                }
            }
            
            public event OptionTypeRowChangeEventHandler OptionTypeRowChanging;
            
            public event OptionTypeRowChangeEventHandler OptionTypeRowChanged;
            
            public event OptionTypeRowChangeEventHandler OptionTypeRowDeleting;
            
            public event OptionTypeRowChangeEventHandler OptionTypeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddOptionTypeRow(OptionTypeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OptionTypeRow AddOptionTypeRow(string OptionTypeName, int Divisor) {
                OptionTypeRow rowOptionTypeRow = ((OptionTypeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        OptionTypeName,
                        Divisor};
                rowOptionTypeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowOptionTypeRow);
                return rowOptionTypeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OptionTypeRow FindByOptionTypeID(int OptionTypeID) {
                return ((OptionTypeRow)(this.Rows.Find(new object[] {
                            OptionTypeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                OptionTypeDataTable cln = ((OptionTypeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new OptionTypeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnOptionTypeID = base.Columns["OptionTypeID"];
                this.columnOptionTypeName = base.Columns["OptionTypeName"];
                this.columnDivisor = base.Columns["Divisor"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnOptionTypeID = new global::System.Data.DataColumn("OptionTypeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOptionTypeID);
                this.columnOptionTypeName = new global::System.Data.DataColumn("OptionTypeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOptionTypeName);
                this.columnDivisor = new global::System.Data.DataColumn("Divisor", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDivisor);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnOptionTypeID}, true));
                this.columnOptionTypeID.AutoIncrement = true;
                this.columnOptionTypeID.AutoIncrementSeed = -1;
                this.columnOptionTypeID.AutoIncrementStep = -1;
                this.columnOptionTypeID.AllowDBNull = false;
                this.columnOptionTypeID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OptionTypeRow NewOptionTypeRow() {
                return ((OptionTypeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new OptionTypeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(OptionTypeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.OptionTypeRowChanged != null)) {
                    this.OptionTypeRowChanged(this, new OptionTypeRowChangeEvent(((OptionTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.OptionTypeRowChanging != null)) {
                    this.OptionTypeRowChanging(this, new OptionTypeRowChangeEvent(((OptionTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.OptionTypeRowDeleted != null)) {
                    this.OptionTypeRowDeleted(this, new OptionTypeRowChangeEvent(((OptionTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.OptionTypeRowDeleting != null)) {
                    this.OptionTypeRowDeleting(this, new OptionTypeRowChangeEvent(((OptionTypeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveOptionTypeRow(OptionTypeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "OptionTypeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FlagDataTable : global::System.Data.TypedTableBase<FlagRow> {
            
            private global::System.Data.DataColumn columnFlagID;
            
            private global::System.Data.DataColumn columnFlagImage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlagDataTable() {
                this.TableName = "Flag";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FlagDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected FlagDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlagIDColumn {
                get {
                    return this.columnFlagID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlagImageColumn {
                get {
                    return this.columnFlagImage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlagRow this[int index] {
                get {
                    return ((FlagRow)(this.Rows[index]));
                }
            }
            
            public event FlagRowChangeEventHandler FlagRowChanging;
            
            public event FlagRowChangeEventHandler FlagRowChanged;
            
            public event FlagRowChangeEventHandler FlagRowDeleting;
            
            public event FlagRowChangeEventHandler FlagRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFlagRow(FlagRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlagRow AddFlagRow(byte[] FlagImage) {
                FlagRow rowFlagRow = ((FlagRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        FlagImage};
                rowFlagRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFlagRow);
                return rowFlagRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlagRow FindByFlagID(int FlagID) {
                return ((FlagRow)(this.Rows.Find(new object[] {
                            FlagID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FlagDataTable cln = ((FlagDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FlagDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFlagID = base.Columns["FlagID"];
                this.columnFlagImage = base.Columns["FlagImage"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFlagID = new global::System.Data.DataColumn("FlagID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlagID);
                this.columnFlagImage = new global::System.Data.DataColumn("FlagImage", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlagImage);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFlagID}, true));
                this.columnFlagID.AutoIncrement = true;
                this.columnFlagID.AutoIncrementSeed = -1;
                this.columnFlagID.AutoIncrementStep = -1;
                this.columnFlagID.AllowDBNull = false;
                this.columnFlagID.Unique = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlagRow NewFlagRow() {
                return ((FlagRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FlagRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FlagRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FlagRowChanged != null)) {
                    this.FlagRowChanged(this, new FlagRowChangeEvent(((FlagRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FlagRowChanging != null)) {
                    this.FlagRowChanging(this, new FlagRowChangeEvent(((FlagRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FlagRowDeleted != null)) {
                    this.FlagRowDeleted(this, new FlagRowChangeEvent(((FlagRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FlagRowDeleting != null)) {
                    this.FlagRowDeleting(this, new FlagRowChangeEvent(((FlagRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFlagRow(FlagRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FlagDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TemplateCategoryDataTable : global::System.Data.TypedTableBase<TemplateCategoryRow> {
            
            private global::System.Data.DataColumn columnTemplateCategoryID;
            
            private global::System.Data.DataColumn columnTemplateCategoryName;
            
            private global::System.Data.DataColumn columnParentTemplateCategoryID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateCategoryDataTable() {
                this.TableName = "TemplateCategory";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TemplateCategoryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TemplateCategoryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TemplateCategoryIDColumn {
                get {
                    return this.columnTemplateCategoryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TemplateCategoryNameColumn {
                get {
                    return this.columnTemplateCategoryName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParentTemplateCategoryIDColumn {
                get {
                    return this.columnParentTemplateCategoryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateCategoryRow this[int index] {
                get {
                    return ((TemplateCategoryRow)(this.Rows[index]));
                }
            }
            
            public event TemplateCategoryRowChangeEventHandler TemplateCategoryRowChanging;
            
            public event TemplateCategoryRowChangeEventHandler TemplateCategoryRowChanged;
            
            public event TemplateCategoryRowChangeEventHandler TemplateCategoryRowDeleting;
            
            public event TemplateCategoryRowChangeEventHandler TemplateCategoryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTemplateCategoryRow(TemplateCategoryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateCategoryRow AddTemplateCategoryRow(string TemplateCategoryName, int ParentTemplateCategoryID) {
                TemplateCategoryRow rowTemplateCategoryRow = ((TemplateCategoryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        TemplateCategoryName,
                        ParentTemplateCategoryID};
                rowTemplateCategoryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTemplateCategoryRow);
                return rowTemplateCategoryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateCategoryRow FindByTemplateCategoryID(int TemplateCategoryID) {
                return ((TemplateCategoryRow)(this.Rows.Find(new object[] {
                            TemplateCategoryID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TemplateCategoryDataTable cln = ((TemplateCategoryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TemplateCategoryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTemplateCategoryID = base.Columns["TemplateCategoryID"];
                this.columnTemplateCategoryName = base.Columns["TemplateCategoryName"];
                this.columnParentTemplateCategoryID = base.Columns["ParentTemplateCategoryID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTemplateCategoryID = new global::System.Data.DataColumn("TemplateCategoryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateCategoryID);
                this.columnTemplateCategoryName = new global::System.Data.DataColumn("TemplateCategoryName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateCategoryName);
                this.columnParentTemplateCategoryID = new global::System.Data.DataColumn("ParentTemplateCategoryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParentTemplateCategoryID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTemplateCategoryID}, true));
                this.columnTemplateCategoryID.AutoIncrement = true;
                this.columnTemplateCategoryID.AutoIncrementSeed = -1;
                this.columnTemplateCategoryID.AutoIncrementStep = -1;
                this.columnTemplateCategoryID.AllowDBNull = false;
                this.columnTemplateCategoryID.ReadOnly = true;
                this.columnTemplateCategoryID.Unique = true;
                this.columnTemplateCategoryName.MaxLength = 100;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateCategoryRow NewTemplateCategoryRow() {
                return ((TemplateCategoryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TemplateCategoryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TemplateCategoryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TemplateCategoryRowChanged != null)) {
                    this.TemplateCategoryRowChanged(this, new TemplateCategoryRowChangeEvent(((TemplateCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TemplateCategoryRowChanging != null)) {
                    this.TemplateCategoryRowChanging(this, new TemplateCategoryRowChangeEvent(((TemplateCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TemplateCategoryRowDeleted != null)) {
                    this.TemplateCategoryRowDeleted(this, new TemplateCategoryRowChangeEvent(((TemplateCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TemplateCategoryRowDeleting != null)) {
                    this.TemplateCategoryRowDeleting(this, new TemplateCategoryRowChangeEvent(((TemplateCategoryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTemplateCategoryRow(TemplateCategoryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TemplateCategoryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TemplateDataTable : global::System.Data.TypedTableBase<TemplateRow> {
            
            private global::System.Data.DataColumn columnTemplateID;
            
            private global::System.Data.DataColumn columnTemplateName;
            
            private global::System.Data.DataColumn columnFilePath;
            
            private global::System.Data.DataColumn columnParentTemplateCategoryID;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateDataTable() {
                this.TableName = "Template";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TemplateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TemplateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TemplateIDColumn {
                get {
                    return this.columnTemplateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TemplateNameColumn {
                get {
                    return this.columnTemplateName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FilePathColumn {
                get {
                    return this.columnFilePath;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParentTemplateCategoryIDColumn {
                get {
                    return this.columnParentTemplateCategoryID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateRow this[int index] {
                get {
                    return ((TemplateRow)(this.Rows[index]));
                }
            }
            
            public event TemplateRowChangeEventHandler TemplateRowChanging;
            
            public event TemplateRowChangeEventHandler TemplateRowChanged;
            
            public event TemplateRowChangeEventHandler TemplateRowDeleting;
            
            public event TemplateRowChangeEventHandler TemplateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTemplateRow(TemplateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateRow AddTemplateRow(string TemplateName, string FilePath, TemplateCategoryRow parentTemplateCategoryRowByTemplateCategory_Template) {
                TemplateRow rowTemplateRow = ((TemplateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        TemplateName,
                        FilePath,
                        null};
                if ((parentTemplateCategoryRowByTemplateCategory_Template != null)) {
                    columnValuesArray[3] = parentTemplateCategoryRowByTemplateCategory_Template[0];
                }
                rowTemplateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTemplateRow);
                return rowTemplateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateRow FindByTemplateID(int TemplateID) {
                return ((TemplateRow)(this.Rows.Find(new object[] {
                            TemplateID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TemplateDataTable cln = ((TemplateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TemplateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTemplateID = base.Columns["TemplateID"];
                this.columnTemplateName = base.Columns["TemplateName"];
                this.columnFilePath = base.Columns["FilePath"];
                this.columnParentTemplateCategoryID = base.Columns["ParentTemplateCategoryID"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTemplateID = new global::System.Data.DataColumn("TemplateID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateID);
                this.columnTemplateName = new global::System.Data.DataColumn("TemplateName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTemplateName);
                this.columnFilePath = new global::System.Data.DataColumn("FilePath", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFilePath);
                this.columnParentTemplateCategoryID = new global::System.Data.DataColumn("ParentTemplateCategoryID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParentTemplateCategoryID);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnTemplateID}, true));
                this.columnTemplateID.AutoIncrement = true;
                this.columnTemplateID.AutoIncrementSeed = -1;
                this.columnTemplateID.AutoIncrementStep = -1;
                this.columnTemplateID.AllowDBNull = false;
                this.columnTemplateID.ReadOnly = true;
                this.columnTemplateID.Unique = true;
                this.columnTemplateName.AllowDBNull = false;
                this.columnTemplateName.MaxLength = 100;
                this.columnFilePath.MaxLength = 255;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateRow NewTemplateRow() {
                return ((TemplateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TemplateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TemplateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TemplateRowChanged != null)) {
                    this.TemplateRowChanged(this, new TemplateRowChangeEvent(((TemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TemplateRowChanging != null)) {
                    this.TemplateRowChanging(this, new TemplateRowChangeEvent(((TemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TemplateRowDeleted != null)) {
                    this.TemplateRowDeleted(this, new TemplateRowChangeEvent(((TemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TemplateRowDeleting != null)) {
                    this.TemplateRowDeleting(this, new TemplateRowChangeEvent(((TemplateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTemplateRow(TemplateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TemplateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CurrencyRateDataTable : global::System.Data.TypedTableBase<CurrencyRateRow> {
            
            private global::System.Data.DataColumn columnCurrencyRateID;
            
            private global::System.Data.DataColumn columnCurrencyCodeFrom;
            
            private global::System.Data.DataColumn columnCurrencyCodeTo;
            
            private global::System.Data.DataColumn columnCurrencyRateDate;
            
            private global::System.Data.DataColumn columnActualRate;
            
            private global::System.Data.DataColumn columnForecastRate;
            
            private global::System.Data.DataColumn columnForecastDate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrencyRateDataTable() {
                this.TableName = "CurrencyRate";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CurrencyRateDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CurrencyRateDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrencyRateIDColumn {
                get {
                    return this.columnCurrencyRateID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrencyCodeFromColumn {
                get {
                    return this.columnCurrencyCodeFrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrencyCodeToColumn {
                get {
                    return this.columnCurrencyCodeTo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CurrencyRateDateColumn {
                get {
                    return this.columnCurrencyRateDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ActualRateColumn {
                get {
                    return this.columnActualRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ForecastRateColumn {
                get {
                    return this.columnForecastRate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ForecastDateColumn {
                get {
                    return this.columnForecastDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrencyRateRow this[int index] {
                get {
                    return ((CurrencyRateRow)(this.Rows[index]));
                }
            }
            
            public event CurrencyRateRowChangeEventHandler CurrencyRateRowChanging;
            
            public event CurrencyRateRowChangeEventHandler CurrencyRateRowChanged;
            
            public event CurrencyRateRowChangeEventHandler CurrencyRateRowDeleting;
            
            public event CurrencyRateRowChangeEventHandler CurrencyRateRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCurrencyRateRow(CurrencyRateRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrencyRateRow AddCurrencyRateRow(CurrencyRow parentCurrencyRowByCurrencyCurrencyRateFrom, CurrencyRow parentCurrencyRowByCurrencyCurrencyRateTo, System.DateTime CurrencyRateDate, decimal ActualRate, decimal ForecastRate, System.DateTime ForecastDate) {
                CurrencyRateRow rowCurrencyRateRow = ((CurrencyRateRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        null,
                        CurrencyRateDate,
                        ActualRate,
                        ForecastRate,
                        ForecastDate};
                if ((parentCurrencyRowByCurrencyCurrencyRateFrom != null)) {
                    columnValuesArray[1] = parentCurrencyRowByCurrencyCurrencyRateFrom[0];
                }
                if ((parentCurrencyRowByCurrencyCurrencyRateTo != null)) {
                    columnValuesArray[2] = parentCurrencyRowByCurrencyCurrencyRateTo[0];
                }
                rowCurrencyRateRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCurrencyRateRow);
                return rowCurrencyRateRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrencyRateRow FindByCurrencyRateID(int CurrencyRateID) {
                return ((CurrencyRateRow)(this.Rows.Find(new object[] {
                            CurrencyRateID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CurrencyRateDataTable cln = ((CurrencyRateDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CurrencyRateDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCurrencyRateID = base.Columns["CurrencyRateID"];
                this.columnCurrencyCodeFrom = base.Columns["CurrencyCodeFrom"];
                this.columnCurrencyCodeTo = base.Columns["CurrencyCodeTo"];
                this.columnCurrencyRateDate = base.Columns["CurrencyRateDate"];
                this.columnActualRate = base.Columns["ActualRate"];
                this.columnForecastRate = base.Columns["ForecastRate"];
                this.columnForecastDate = base.Columns["ForecastDate"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCurrencyRateID = new global::System.Data.DataColumn("CurrencyRateID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrencyRateID);
                this.columnCurrencyCodeFrom = new global::System.Data.DataColumn("CurrencyCodeFrom", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrencyCodeFrom);
                this.columnCurrencyCodeTo = new global::System.Data.DataColumn("CurrencyCodeTo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrencyCodeTo);
                this.columnCurrencyRateDate = new global::System.Data.DataColumn("CurrencyRateDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCurrencyRateDate);
                this.columnActualRate = new global::System.Data.DataColumn("ActualRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnActualRate);
                this.columnForecastRate = new global::System.Data.DataColumn("ForecastRate", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnForecastRate);
                this.columnForecastDate = new global::System.Data.DataColumn("ForecastDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnForecastDate);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCurrencyRateID}, true));
                this.columnCurrencyRateID.AutoIncrement = true;
                this.columnCurrencyRateID.AutoIncrementSeed = -1;
                this.columnCurrencyRateID.AutoIncrementStep = -1;
                this.columnCurrencyRateID.AllowDBNull = false;
                this.columnCurrencyRateID.ReadOnly = true;
                this.columnCurrencyRateID.Unique = true;
                this.columnCurrencyCodeFrom.AllowDBNull = false;
                this.columnCurrencyCodeFrom.Caption = "FromCurrencyCode";
                this.columnCurrencyCodeFrom.MaxLength = 3;
                this.columnCurrencyCodeTo.AllowDBNull = false;
                this.columnCurrencyCodeTo.Caption = "ToCurrencyCode";
                this.columnCurrencyCodeTo.MaxLength = 3;
                this.columnCurrencyRateDate.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrencyRateRow NewCurrencyRateRow() {
                return ((CurrencyRateRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CurrencyRateRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CurrencyRateRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CurrencyRateRowChanged != null)) {
                    this.CurrencyRateRowChanged(this, new CurrencyRateRowChangeEvent(((CurrencyRateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CurrencyRateRowChanging != null)) {
                    this.CurrencyRateRowChanging(this, new CurrencyRateRowChangeEvent(((CurrencyRateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CurrencyRateRowDeleted != null)) {
                    this.CurrencyRateRowDeleted(this, new CurrencyRateRowChangeEvent(((CurrencyRateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CurrencyRateRowDeleting != null)) {
                    this.CurrencyRateRowDeleting(this, new CurrencyRateRowChangeEvent(((CurrencyRateRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCurrencyRateRow(CurrencyRateRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ToolSet ds = new ToolSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CurrencyRateDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServiceTypeRow : global::System.Data.DataRow {
            
            private ServiceTypeDataTable tableServiceType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServiceTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServiceType = ((ServiceTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServiceTypeID {
                get {
                    return ((int)(this[this.tableServiceType.ServiceTypeIDColumn]));
                }
                set {
                    this[this.tableServiceType.ServiceTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServiceTypeName {
                get {
                    return ((string)(this[this.tableServiceType.ServiceTypeNameColumn]));
                }
                set {
                    this[this.tableServiceType.ServiceTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BookingStartName {
                get {
                    if (this.IsBookingStartNameNull()) {
                        return "Date in";
                    }
                    else {
                        return ((string)(this[this.tableServiceType.BookingStartNameColumn]));
                    }
                }
                set {
                    this[this.tableServiceType.BookingStartNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BookingEndName {
                get {
                    if (this.IsBookingEndNameNull()) {
                        return "Date out";
                    }
                    else {
                        return ((string)(this[this.tableServiceType.BookingEndNameColumn]));
                    }
                }
                set {
                    this[this.tableServiceType.BookingEndNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NumberOfDaysName {
                get {
                    try {
                        return ((string)(this[this.tableServiceType.NumberOfDaysNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NumberOfDaysName\' in table \'ServiceType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServiceType.NumberOfDaysNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NetAccountingCategoryID {
                get {
                    try {
                        return ((int)(this[this.tableServiceType.NetAccountingCategoryIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NetAccountingCategoryID\' in table \'ServiceType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServiceType.NetAccountingCategoryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NetTaxTypeID {
                get {
                    try {
                        return ((int)(this[this.tableServiceType.NetTaxTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NetTaxTypeID\' in table \'ServiceType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServiceType.NetTaxTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GrossAccountingCategoryID {
                get {
                    try {
                        return ((int)(this[this.tableServiceType.GrossAccountingCategoryIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrossAccountingCategoryID\' in table \'ServiceType\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableServiceType.GrossAccountingCategoryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GrossTaxTypeID {
                get {
                    try {
                        return ((int)(this[this.tableServiceType.GrossTaxTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GrossTaxTypeID\' in table \'ServiceType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServiceType.GrossTaxTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tableServiceType.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'ServiceType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServiceType.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdditionalMarkupContainer {
                get {
                    try {
                        return ((bool)(this[this.tableServiceType.IsAdditionalMarkupContainerColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsAdditionalMarkupContainer\' in table \'ServiceType\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableServiceType.IsAdditionalMarkupContainerColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBookingStartNameNull() {
                return this.IsNull(this.tableServiceType.BookingStartNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBookingStartNameNull() {
                this[this.tableServiceType.BookingStartNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBookingEndNameNull() {
                return this.IsNull(this.tableServiceType.BookingEndNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBookingEndNameNull() {
                this[this.tableServiceType.BookingEndNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumberOfDaysNameNull() {
                return this.IsNull(this.tableServiceType.NumberOfDaysNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumberOfDaysNameNull() {
                this[this.tableServiceType.NumberOfDaysNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNetAccountingCategoryIDNull() {
                return this.IsNull(this.tableServiceType.NetAccountingCategoryIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNetAccountingCategoryIDNull() {
                this[this.tableServiceType.NetAccountingCategoryIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNetTaxTypeIDNull() {
                return this.IsNull(this.tableServiceType.NetTaxTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNetTaxTypeIDNull() {
                this[this.tableServiceType.NetTaxTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrossAccountingCategoryIDNull() {
                return this.IsNull(this.tableServiceType.GrossAccountingCategoryIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrossAccountingCategoryIDNull() {
                this[this.tableServiceType.GrossAccountingCategoryIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGrossTaxTypeIDNull() {
                return this.IsNull(this.tableServiceType.GrossTaxTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGrossTaxTypeIDNull() {
                this[this.tableServiceType.GrossTaxTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tableServiceType.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tableServiceType.IsDeletedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsAdditionalMarkupContainerNull() {
                return this.IsNull(this.tableServiceType.IsAdditionalMarkupContainerColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsAdditionalMarkupContainerNull() {
                this[this.tableServiceType.IsAdditionalMarkupContainerColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceConfigTypeRow[] GetServiceConfigTypeRows() {
                if ((this.Table.ChildRelations["ServiceTypeServiceConfigType"] == null)) {
                    return new ServiceConfigTypeRow[0];
                }
                else {
                    return ((ServiceConfigTypeRow[])(base.GetChildRows(this.Table.ChildRelations["ServiceTypeServiceConfigType"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GradeRow : global::System.Data.DataRow {
            
            private GradeDataTable tableGrade;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GradeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGrade = ((GradeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GradeID {
                get {
                    return ((int)(this[this.tableGrade.GradeIDColumn]));
                }
                set {
                    this[this.tableGrade.GradeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GradeName {
                get {
                    return ((string)(this[this.tableGrade.GradeNameColumn]));
                }
                set {
                    this[this.tableGrade.GradeNameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class GradeExternalRow : global::System.Data.DataRow {
            
            private GradeExternalDataTable tableGradeExternal;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal GradeExternalRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableGradeExternal = ((GradeExternalDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int GradeExternalID {
                get {
                    return ((int)(this[this.tableGradeExternal.GradeExternalIDColumn]));
                }
                set {
                    this[this.tableGradeExternal.GradeExternalIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string GradeExternalName {
                get {
                    try {
                        return ((string)(this[this.tableGradeExternal.GradeExternalNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'GradeExternalName\' in table \'GradeExternal\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableGradeExternal.GradeExternalNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsGradeExternalNameNull() {
                return this.IsNull(this.tableGradeExternal.GradeExternalNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetGradeExternalNameNull() {
                this[this.tableGradeExternal.GradeExternalNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CreditCardRow : global::System.Data.DataRow {
            
            private CreditCardDataTable tableCreditCard;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CreditCardRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCreditCard = ((CreditCardDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CreditCardID {
                get {
                    return ((int)(this[this.tableCreditCard.CreditCardIDColumn]));
                }
                set {
                    this[this.tableCreditCard.CreditCardIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreditCardName {
                get {
                    return ((string)(this[this.tableCreditCard.CreditCardNameColumn]));
                }
                set {
                    this[this.tableCreditCard.CreditCardNameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CountryRow : global::System.Data.DataRow {
            
            private CountryDataTable tableCountry;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CountryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCountry = ((CountryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CountryID {
                get {
                    return ((int)(this[this.tableCountry.CountryIDColumn]));
                }
                set {
                    this[this.tableCountry.CountryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CountryName {
                get {
                    return ((string)(this[this.tableCountry.CountryNameColumn]));
                }
                set {
                    this[this.tableCountry.CountryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CountryCode {
                get {
                    try {
                        return ((string)(this[this.tableCountry.CountryCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CountryCode\' in table \'Country\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCountry.CountryCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PhoneCode {
                get {
                    try {
                        return ((string)(this[this.tableCountry.PhoneCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PhoneCode\' in table \'Country\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCountry.PhoneCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryCodeNull() {
                return this.IsNull(this.tableCountry.CountryCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryCodeNull() {
                this[this.tableCountry.CountryCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhoneCodeNull() {
                return this.IsNull(this.tableCountry.PhoneCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhoneCodeNull() {
                this[this.tableCountry.PhoneCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateRow[] GetStateRows() {
                if ((this.Table.ChildRelations["CountryState"] == null)) {
                    return new StateRow[0];
                }
                else {
                    return ((StateRow[])(base.GetChildRows(this.Table.ChildRelations["CountryState"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class StateRow : global::System.Data.DataRow {
            
            private StateDataTable tableState;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableState = ((StateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StateID {
                get {
                    return ((int)(this[this.tableState.StateIDColumn]));
                }
                set {
                    this[this.tableState.StateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StateName {
                get {
                    return ((string)(this[this.tableState.StateNameColumn]));
                }
                set {
                    this[this.tableState.StateNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CountryID {
                get {
                    try {
                        return ((int)(this[this.tableState.CountryIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CountryID\' in table \'State\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableState.CountryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRow CountryRow {
                get {
                    return ((CountryRow)(this.GetParentRow(this.Table.ParentRelations["CountryState"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CountryState"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountryIDNull() {
                return this.IsNull(this.tableState.CountryIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountryIDNull() {
                this[this.tableState.CountryIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegionRow[] GetRegionRows() {
                if ((this.Table.ChildRelations["StateRegion"] == null)) {
                    return new RegionRow[0];
                }
                else {
                    return ((RegionRow[])(base.GetChildRows(this.Table.ChildRelations["StateRegion"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RegionRow : global::System.Data.DataRow {
            
            private RegionDataTable tableRegion;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RegionRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRegion = ((RegionDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RegionID {
                get {
                    return ((int)(this[this.tableRegion.RegionIDColumn]));
                }
                set {
                    this[this.tableRegion.RegionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RegionName {
                get {
                    return ((string)(this[this.tableRegion.RegionNameColumn]));
                }
                set {
                    this[this.tableRegion.RegionNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StateID {
                get {
                    try {
                        return ((int)(this[this.tableRegion.StateIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StateID\' in table \'Region\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRegion.StateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateRow StateRow {
                get {
                    return ((StateRow)(this.GetParentRow(this.Table.ParentRelations["StateRegion"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["StateRegion"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStateIDNull() {
                return this.IsNull(this.tableRegion.StateIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStateIDNull() {
                this[this.tableRegion.StateIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CityRow[] GetCityRows() {
                if ((this.Table.ChildRelations["RegionCity"] == null)) {
                    return new CityRow[0];
                }
                else {
                    return ((CityRow[])(base.GetChildRows(this.Table.ChildRelations["RegionCity"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CityRow : global::System.Data.DataRow {
            
            private CityDataTable tableCity;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CityRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCity = ((CityDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CityID {
                get {
                    return ((int)(this[this.tableCity.CityIDColumn]));
                }
                set {
                    this[this.tableCity.CityIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CityName {
                get {
                    return ((string)(this[this.tableCity.CityNameColumn]));
                }
                set {
                    this[this.tableCity.CityNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RegionID {
                get {
                    try {
                        return ((int)(this[this.tableCity.RegionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RegionID\' in table \'City\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCity.RegionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegionRow RegionRow {
                get {
                    return ((RegionRow)(this.GetParentRow(this.Table.ParentRelations["RegionCity"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["RegionCity"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRegionIDNull() {
                return this.IsNull(this.tableCity.RegionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRegionIDNull() {
                this[this.tableCity.RegionIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ServiceConfigTypeRow : global::System.Data.DataRow {
            
            private ServiceConfigTypeDataTable tableServiceConfigType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServiceConfigTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServiceConfigType = ((ServiceConfigTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServiceConfigTypeID {
                get {
                    return ((int)(this[this.tableServiceConfigType.ServiceConfigTypeIDColumn]));
                }
                set {
                    this[this.tableServiceConfigType.ServiceConfigTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ServiceTypeID {
                get {
                    return ((int)(this[this.tableServiceConfigType.ServiceTypeIDColumn]));
                }
                set {
                    this[this.tableServiceConfigType.ServiceTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ServiceConfigTypeName {
                get {
                    if (this.IsServiceConfigTypeNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableServiceConfigType.ServiceConfigTypeNameColumn]));
                    }
                }
                set {
                    this[this.tableServiceConfigType.ServiceConfigTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceTypeRow ServiceTypeRow {
                get {
                    return ((ServiceTypeRow)(this.GetParentRow(this.Table.ParentRelations["ServiceTypeServiceConfigType"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ServiceTypeServiceConfigType"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsServiceConfigTypeNameNull() {
                return this.IsNull(this.tableServiceConfigType.ServiceConfigTypeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetServiceConfigTypeNameNull() {
                this[this.tableServiceConfigType.ServiceConfigTypeNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AgeGroupRow : global::System.Data.DataRow {
            
            private AgeGroupDataTable tableAgeGroup;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AgeGroupRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAgeGroup = ((AgeGroupDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AgeGroupID {
                get {
                    return ((int)(this[this.tableAgeGroup.AgeGroupIDColumn]));
                }
                set {
                    this[this.tableAgeGroup.AgeGroupIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AgeGroupName {
                get {
                    try {
                        return ((string)(this[this.tableAgeGroup.AgeGroupNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgeGroupName\' in table \'AgeGroup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgeGroup.AgeGroupNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgeGroupNameNull() {
                return this.IsNull(this.tableAgeGroup.AgeGroupNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgeGroupNameNull() {
                this[this.tableAgeGroup.AgeGroupNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ItineraryStatusRow : global::System.Data.DataRow {
            
            private ItineraryStatusDataTable tableItineraryStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ItineraryStatusRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableItineraryStatus = ((ItineraryStatusDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ItineraryStatusID {
                get {
                    return ((int)(this[this.tableItineraryStatus.ItineraryStatusIDColumn]));
                }
                set {
                    this[this.tableItineraryStatus.ItineraryStatusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItineraryStatusName {
                get {
                    return ((string)(this[this.tableItineraryStatus.ItineraryStatusNameColumn]));
                }
                set {
                    this[this.tableItineraryStatus.ItineraryStatusNameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RequestStatusRow : global::System.Data.DataRow {
            
            private RequestStatusDataTable tableRequestStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RequestStatusRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRequestStatus = ((RequestStatusDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RequestStatusID {
                get {
                    return ((int)(this[this.tableRequestStatus.RequestStatusIDColumn]));
                }
                set {
                    this[this.tableRequestStatus.RequestStatusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RequestStatusName {
                get {
                    return ((string)(this[this.tableRequestStatus.RequestStatusNameColumn]));
                }
                set {
                    this[this.tableRequestStatus.RequestStatusNameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UserRow : global::System.Data.DataRow {
            
            private UserDataTable tableUser;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUser = ((UserDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int UserID {
                get {
                    return ((int)(this[this.tableUser.UserIDColumn]));
                }
                set {
                    this[this.tableUser.UserIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UserName {
                get {
                    return ((string)(this[this.tableUser.UserNameColumn]));
                }
                set {
                    this[this.tableUser.UserNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Password {
                get {
                    return ((string)(this[this.tableUser.PasswordColumn]));
                }
                set {
                    this[this.tableUser.PasswordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DisplayName {
                get {
                    if (this.IsDisplayNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableUser.DisplayNameColumn]));
                    }
                }
                set {
                    this[this.tableUser.DisplayNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableUser.EmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Email\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ContactID {
                get {
                    try {
                        return ((int)(this[this.tableUser.ContactIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContactID\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.ContactIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRecordActive {
                get {
                    try {
                        return ((bool)(this[this.tableUser.IsRecordActiveColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsRecordActive\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.IsRecordActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MustChangePassword {
                get {
                    try {
                        return ((bool)(this[this.tableUser.MustChangePasswordColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MustChangePassword\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.MustChangePasswordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AddedOn {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUser.AddedOnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AddedOn\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.AddedOnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AddedBy {
                get {
                    try {
                        return ((int)(this[this.tableUser.AddedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AddedBy\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.AddedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableUser.RowVersionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.RowVersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDisplayNameNull() {
                return this.IsNull(this.tableUser.DisplayNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDisplayNameNull() {
                this[this.tableUser.DisplayNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailNull() {
                return this.IsNull(this.tableUser.EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailNull() {
                this[this.tableUser.EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContactIDNull() {
                return this.IsNull(this.tableUser.ContactIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContactIDNull() {
                this[this.tableUser.ContactIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsRecordActiveNull() {
                return this.IsNull(this.tableUser.IsRecordActiveColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsRecordActiveNull() {
                this[this.tableUser.IsRecordActiveColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMustChangePasswordNull() {
                return this.IsNull(this.tableUser.MustChangePasswordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMustChangePasswordNull() {
                this[this.tableUser.MustChangePasswordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddedOnNull() {
                return this.IsNull(this.tableUser.AddedOnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddedOnNull() {
                this[this.tableUser.AddedOnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddedByNull() {
                return this.IsNull(this.tableUser.AddedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddedByNull() {
                this[this.tableUser.AddedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableUser.RowVersionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableUser.RowVersionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class BranchRow : global::System.Data.DataRow {
            
            private BranchDataTable tableBranch;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal BranchRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableBranch = ((BranchDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BranchID {
                get {
                    return ((int)(this[this.tableBranch.BranchIDColumn]));
                }
                set {
                    this[this.tableBranch.BranchIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BranchName {
                get {
                    return ((string)(this[this.tableBranch.BranchNameColumn]));
                }
                set {
                    this[this.tableBranch.BranchNameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DepartmentRow : global::System.Data.DataRow {
            
            private DepartmentDataTable tableDepartment;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DepartmentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDepartment = ((DepartmentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DepartmentID {
                get {
                    return ((int)(this[this.tableDepartment.DepartmentIDColumn]));
                }
                set {
                    this[this.tableDepartment.DepartmentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DepartmentName {
                get {
                    return ((string)(this[this.tableDepartment.DepartmentNameColumn]));
                }
                set {
                    this[this.tableDepartment.DepartmentNameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ItinerarySourceRow : global::System.Data.DataRow {
            
            private ItinerarySourceDataTable tableItinerarySource;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ItinerarySourceRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableItinerarySource = ((ItinerarySourceDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ItinerarySourceID {
                get {
                    return ((int)(this[this.tableItinerarySource.ItinerarySourceIDColumn]));
                }
                set {
                    this[this.tableItinerarySource.ItinerarySourceIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ItinerarySourceName {
                get {
                    return ((string)(this[this.tableItinerarySource.ItinerarySourceNameColumn]));
                }
                set {
                    this[this.tableItinerarySource.ItinerarySourceNameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AppSettingsRow : global::System.Data.DataRow {
            
            private AppSettingsDataTable tableAppSettings;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AppSettingsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAppSettings = ((AppSettingsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AppSettingsID {
                get {
                    return ((int)(this[this.tableAppSettings.AppSettingsIDColumn]));
                }
                set {
                    this[this.tableAppSettings.AppSettingsIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid InstallID {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableAppSettings.InstallIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InstallID\' in table \'AppSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAppSettings.InstallIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InstallName {
                get {
                    try {
                        return ((string)(this[this.tableAppSettings.InstallNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InstallName\' in table \'AppSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAppSettings.InstallNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VersionNumber {
                get {
                    try {
                        return ((string)(this[this.tableAppSettings.VersionNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VersionNumber\' in table \'AppSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAppSettings.VersionNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CurrencyCode {
                get {
                    if (this.IsCurrencyCodeNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableAppSettings.CurrencyCodeColumn]));
                    }
                }
                set {
                    this[this.tableAppSettings.CurrencyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SupportEmail {
                get {
                    try {
                        return ((string)(this[this.tableAppSettings.SupportEmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SupportEmail\' in table \'AppSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAppSettings.SupportEmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SupportPhone {
                get {
                    try {
                        return ((string)(this[this.tableAppSettings.SupportPhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SupportPhone\' in table \'AppSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAppSettings.SupportPhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SmtpServerName {
                get {
                    if (this.IsSmtpServerNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableAppSettings.SmtpServerNameColumn]));
                    }
                }
                set {
                    this[this.tableAppSettings.SmtpServerNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SmtpServerPort {
                get {
                    try {
                        return ((int)(this[this.tableAppSettings.SmtpServerPortColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SmtpServerPort\' in table \'AppSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAppSettings.SmtpServerPortColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SmtpServerUsername {
                get {
                    if (this.IsSmtpServerUsernameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableAppSettings.SmtpServerUsernameColumn]));
                    }
                }
                set {
                    this[this.tableAppSettings.SmtpServerUsernameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SmtpServerPassword {
                get {
                    if (this.IsSmtpServerPasswordNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableAppSettings.SmtpServerPasswordColumn]));
                    }
                }
                set {
                    this[this.tableAppSettings.SmtpServerPasswordColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool SmtpServerEnableSsl {
                get {
                    try {
                        return ((bool)(this[this.tableAppSettings.SmtpServerEnableSslColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SmtpServerEnableSsl\' in table \'AppSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAppSettings.SmtpServerEnableSslColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastDbBackupDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAppSettings.LastDbBackupDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastDbBackupDate\' in table \'AppSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAppSettings.LastDbBackupDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastDbBackupFile {
                get {
                    try {
                        return ((string)(this[this.tableAppSettings.LastDbBackupFileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastDbBackupFile\' in table \'AppSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAppSettings.LastDbBackupFileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LastDbBackupName {
                get {
                    try {
                        return ((string)(this[this.tableAppSettings.LastDbBackupNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastDbBackupName\' in table \'AppSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAppSettings.LastDbBackupNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ExternalFilesPath {
                get {
                    if (this.IsExternalFilesPathNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableAppSettings.ExternalFilesPathColumn]));
                    }
                }
                set {
                    this[this.tableAppSettings.ExternalFilesPathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CancelledRequestStatusID {
                get {
                    try {
                        return ((int)(this[this.tableAppSettings.CancelledRequestStatusIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CancelledRequestStatusID\' in table \'AppSettings\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableAppSettings.CancelledRequestStatusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableAppSettings.RowVersionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'AppSettings\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAppSettings.RowVersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstallIDNull() {
                return this.IsNull(this.tableAppSettings.InstallIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstallIDNull() {
                this[this.tableAppSettings.InstallIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInstallNameNull() {
                return this.IsNull(this.tableAppSettings.InstallNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInstallNameNull() {
                this[this.tableAppSettings.InstallNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVersionNumberNull() {
                return this.IsNull(this.tableAppSettings.VersionNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVersionNumberNull() {
                this[this.tableAppSettings.VersionNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrencyCodeNull() {
                return this.IsNull(this.tableAppSettings.CurrencyCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrencyCodeNull() {
                this[this.tableAppSettings.CurrencyCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupportEmailNull() {
                return this.IsNull(this.tableAppSettings.SupportEmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupportEmailNull() {
                this[this.tableAppSettings.SupportEmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSupportPhoneNull() {
                return this.IsNull(this.tableAppSettings.SupportPhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSupportPhoneNull() {
                this[this.tableAppSettings.SupportPhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSmtpServerNameNull() {
                return this.IsNull(this.tableAppSettings.SmtpServerNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSmtpServerNameNull() {
                this[this.tableAppSettings.SmtpServerNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSmtpServerPortNull() {
                return this.IsNull(this.tableAppSettings.SmtpServerPortColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSmtpServerPortNull() {
                this[this.tableAppSettings.SmtpServerPortColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSmtpServerUsernameNull() {
                return this.IsNull(this.tableAppSettings.SmtpServerUsernameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSmtpServerUsernameNull() {
                this[this.tableAppSettings.SmtpServerUsernameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSmtpServerPasswordNull() {
                return this.IsNull(this.tableAppSettings.SmtpServerPasswordColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSmtpServerPasswordNull() {
                this[this.tableAppSettings.SmtpServerPasswordColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSmtpServerEnableSslNull() {
                return this.IsNull(this.tableAppSettings.SmtpServerEnableSslColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSmtpServerEnableSslNull() {
                this[this.tableAppSettings.SmtpServerEnableSslColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastDbBackupDateNull() {
                return this.IsNull(this.tableAppSettings.LastDbBackupDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastDbBackupDateNull() {
                this[this.tableAppSettings.LastDbBackupDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastDbBackupFileNull() {
                return this.IsNull(this.tableAppSettings.LastDbBackupFileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastDbBackupFileNull() {
                this[this.tableAppSettings.LastDbBackupFileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastDbBackupNameNull() {
                return this.IsNull(this.tableAppSettings.LastDbBackupNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastDbBackupNameNull() {
                this[this.tableAppSettings.LastDbBackupNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsExternalFilesPathNull() {
                return this.IsNull(this.tableAppSettings.ExternalFilesPathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetExternalFilesPathNull() {
                this[this.tableAppSettings.ExternalFilesPathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCancelledRequestStatusIDNull() {
                return this.IsNull(this.tableAppSettings.CancelledRequestStatusIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCancelledRequestStatusIDNull() {
                this[this.tableAppSettings.CancelledRequestStatusIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableAppSettings.RowVersionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableAppSettings.RowVersionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AgentRow : global::System.Data.DataRow {
            
            private AgentDataTable tableAgent;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AgentRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAgent = ((AgentDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AgentID {
                get {
                    return ((int)(this[this.tableAgent.AgentIDColumn]));
                }
                set {
                    this[this.tableAgent.AgentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AgentName {
                get {
                    return ((string)(this[this.tableAgent.AgentNameColumn]));
                }
                set {
                    this[this.tableAgent.AgentNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParentAgentID {
                get {
                    try {
                        return ((int)(this[this.tableAgent.ParentAgentIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParentAgentID\' in table \'Agent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent.ParentAgentIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address1 {
                get {
                    try {
                        return ((string)(this[this.tableAgent.Address1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address1\' in table \'Agent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent.Address1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address2 {
                get {
                    try {
                        return ((string)(this[this.tableAgent.Address2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address2\' in table \'Agent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent.Address2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Address3 {
                get {
                    try {
                        return ((string)(this[this.tableAgent.Address3Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Address3\' in table \'Agent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent.Address3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Phone {
                get {
                    try {
                        return ((string)(this[this.tableAgent.PhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Phone\' in table \'Agent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent.PhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Fax {
                get {
                    try {
                        return ((string)(this[this.tableAgent.FaxColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Fax\' in table \'Agent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent.FaxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableAgent.EmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Email\' in table \'Agent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent.EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxNumber {
                get {
                    try {
                        return ((string)(this[this.tableAgent.TaxNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxNumber\' in table \'Agent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent.TaxNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string InvoiceNumberMask {
                get {
                    try {
                        return ((string)(this[this.tableAgent.InvoiceNumberMaskColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'InvoiceNumberMask\' in table \'Agent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent.InvoiceNumberMaskColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PurchasePaymentTermID {
                get {
                    try {
                        return ((int)(this[this.tableAgent.PurchasePaymentTermIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PurchasePaymentTermID\' in table \'Agent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent.PurchasePaymentTermIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SalePaymentTermID {
                get {
                    try {
                        return ((int)(this[this.tableAgent.SalePaymentTermIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SalePaymentTermID\' in table \'Agent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent.SalePaymentTermIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LogoFile {
                get {
                    try {
                        return ((string)(this[this.tableAgent.LogoFileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LogoFile\' in table \'Agent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent.LogoFileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VoucherLogoFile {
                get {
                    try {
                        return ((string)(this[this.tableAgent.VoucherLogoFileColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VoucherLogoFile\' in table \'Agent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent.VoucherLogoFileColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NetComOrMup {
                get {
                    try {
                        return ((string)(this[this.tableAgent.NetComOrMupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NetComOrMup\' in table \'Agent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent.NetComOrMupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableAgent.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'Agent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AgentHeader {
                get {
                    try {
                        return ((string)(this[this.tableAgent.AgentHeaderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgentHeader\' in table \'Agent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent.AgentHeaderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RequestFooter {
                get {
                    try {
                        return ((string)(this[this.tableAgent.RequestFooterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RequestFooter\' in table \'Agent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent.RequestFooterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConfirmFooter {
                get {
                    try {
                        return ((string)(this[this.tableAgent.ConfirmFooterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConfirmFooter\' in table \'Agent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent.ConfirmFooterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RemitFooter {
                get {
                    try {
                        return ((string)(this[this.tableAgent.RemitFooterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RemitFooter\' in table \'Agent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent.RemitFooterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientFooter {
                get {
                    try {
                        return ((string)(this[this.tableAgent.ClientFooterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientFooter\' in table \'Agent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent.ClientFooterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VoucherFooter {
                get {
                    try {
                        return ((string)(this[this.tableAgent.VoucherFooterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VoucherFooter\' in table \'Agent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent.VoucherFooterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDefaultAgent {
                get {
                    try {
                        return ((bool)(this[this.tableAgent.IsDefaultAgentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDefaultAgent\' in table \'Agent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent.IsDefaultAgentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime AddedOn {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAgent.AddedOnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AddedOn\' in table \'Agent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent.AddedOnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AddedBy {
                get {
                    try {
                        return ((int)(this[this.tableAgent.AddedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AddedBy\' in table \'Agent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent.AddedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableAgent.RowVersionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'Agent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent.RowVersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AgentNameParentName {
                get {
                    try {
                        return ((string)(this[this.tableAgent.AgentNameParentNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AgentNameParentName\' in table \'Agent\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAgent.AgentNameParentNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParentAgentIDNull() {
                return this.IsNull(this.tableAgent.ParentAgentIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParentAgentIDNull() {
                this[this.tableAgent.ParentAgentIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress1Null() {
                return this.IsNull(this.tableAgent.Address1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress1Null() {
                this[this.tableAgent.Address1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress2Null() {
                return this.IsNull(this.tableAgent.Address2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress2Null() {
                this[this.tableAgent.Address2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddress3Null() {
                return this.IsNull(this.tableAgent.Address3Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddress3Null() {
                this[this.tableAgent.Address3Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPhoneNull() {
                return this.IsNull(this.tableAgent.PhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPhoneNull() {
                this[this.tableAgent.PhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFaxNull() {
                return this.IsNull(this.tableAgent.FaxColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFaxNull() {
                this[this.tableAgent.FaxColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailNull() {
                return this.IsNull(this.tableAgent.EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailNull() {
                this[this.tableAgent.EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxNumberNull() {
                return this.IsNull(this.tableAgent.TaxNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxNumberNull() {
                this[this.tableAgent.TaxNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInvoiceNumberMaskNull() {
                return this.IsNull(this.tableAgent.InvoiceNumberMaskColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetInvoiceNumberMaskNull() {
                this[this.tableAgent.InvoiceNumberMaskColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPurchasePaymentTermIDNull() {
                return this.IsNull(this.tableAgent.PurchasePaymentTermIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPurchasePaymentTermIDNull() {
                this[this.tableAgent.PurchasePaymentTermIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSalePaymentTermIDNull() {
                return this.IsNull(this.tableAgent.SalePaymentTermIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSalePaymentTermIDNull() {
                this[this.tableAgent.SalePaymentTermIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLogoFileNull() {
                return this.IsNull(this.tableAgent.LogoFileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLogoFileNull() {
                this[this.tableAgent.LogoFileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVoucherLogoFileNull() {
                return this.IsNull(this.tableAgent.VoucherLogoFileColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVoucherLogoFileNull() {
                this[this.tableAgent.VoucherLogoFileColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNetComOrMupNull() {
                return this.IsNull(this.tableAgent.NetComOrMupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNetComOrMupNull() {
                this[this.tableAgent.NetComOrMupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableAgent.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentsNull() {
                this[this.tableAgent.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgentHeaderNull() {
                return this.IsNull(this.tableAgent.AgentHeaderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgentHeaderNull() {
                this[this.tableAgent.AgentHeaderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRequestFooterNull() {
                return this.IsNull(this.tableAgent.RequestFooterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRequestFooterNull() {
                this[this.tableAgent.RequestFooterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConfirmFooterNull() {
                return this.IsNull(this.tableAgent.ConfirmFooterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConfirmFooterNull() {
                this[this.tableAgent.ConfirmFooterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRemitFooterNull() {
                return this.IsNull(this.tableAgent.RemitFooterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRemitFooterNull() {
                this[this.tableAgent.RemitFooterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientFooterNull() {
                return this.IsNull(this.tableAgent.ClientFooterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientFooterNull() {
                this[this.tableAgent.ClientFooterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVoucherFooterNull() {
                return this.IsNull(this.tableAgent.VoucherFooterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVoucherFooterNull() {
                this[this.tableAgent.VoucherFooterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDefaultAgentNull() {
                return this.IsNull(this.tableAgent.IsDefaultAgentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDefaultAgentNull() {
                this[this.tableAgent.IsDefaultAgentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddedOnNull() {
                return this.IsNull(this.tableAgent.AddedOnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddedOnNull() {
                this[this.tableAgent.AddedOnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAddedByNull() {
                return this.IsNull(this.tableAgent.AddedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAddedByNull() {
                this[this.tableAgent.AddedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableAgent.RowVersionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableAgent.RowVersionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAgentNameParentNameNull() {
                return this.IsNull(this.tableAgent.AgentNameParentNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAgentNameParentNameNull() {
                this[this.tableAgent.AgentNameParentNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SupplierConfigTypeRow : global::System.Data.DataRow {
            
            private SupplierConfigTypeDataTable tableSupplierConfigType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SupplierConfigTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSupplierConfigType = ((SupplierConfigTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SupplierConfigTypeID {
                get {
                    return ((int)(this[this.tableSupplierConfigType.SupplierConfigTypeIDColumn]));
                }
                set {
                    this[this.tableSupplierConfigType.SupplierConfigTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SupplierConfigTypeName {
                get {
                    return ((string)(this[this.tableSupplierConfigType.SupplierConfigTypeNameColumn]));
                }
                set {
                    this[this.tableSupplierConfigType.SupplierConfigTypeNameColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MenuTypeRow : global::System.Data.DataRow {
            
            private MenuTypeDataTable tableMenuType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MenuTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMenuType = ((MenuTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MenuTypeID {
                get {
                    return ((int)(this[this.tableMenuType.MenuTypeIDColumn]));
                }
                set {
                    this[this.tableMenuType.MenuTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MenuTypeName {
                get {
                    try {
                        return ((string)(this[this.tableMenuType.MenuTypeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MenuTypeName\' in table \'MenuType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMenuType.MenuTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableMenuType.RowVersionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'MenuType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMenuType.RowVersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMenuTypeNameNull() {
                return this.IsNull(this.tableMenuType.MenuTypeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMenuTypeNameNull() {
                this[this.tableMenuType.MenuTypeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableMenuType.RowVersionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableMenuType.RowVersionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PaymentTypeRow : global::System.Data.DataRow {
            
            private PaymentTypeDataTable tablePaymentType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PaymentTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePaymentType = ((PaymentTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentTypeID {
                get {
                    return ((int)(this[this.tablePaymentType.PaymentTypeIDColumn]));
                }
                set {
                    this[this.tablePaymentType.PaymentTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentTypeName {
                get {
                    return ((string)(this[this.tablePaymentType.PaymentTypeNameColumn]));
                }
                set {
                    this[this.tablePaymentType.PaymentTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AccountingCategoryID {
                get {
                    try {
                        return ((int)(this[this.tablePaymentType.AccountingCategoryIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccountingCategoryID\' in table \'PaymentType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentType.AccountingCategoryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TaxTypeID {
                get {
                    try {
                        return ((int)(this[this.tablePaymentType.TaxTypeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxTypeID\' in table \'PaymentType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentType.TaxTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDefault {
                get {
                    try {
                        return ((bool)(this[this.tablePaymentType.IsDefaultColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDefault\' in table \'PaymentType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentType.IsDefaultColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountingCategoryIDNull() {
                return this.IsNull(this.tablePaymentType.AccountingCategoryIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountingCategoryIDNull() {
                this[this.tablePaymentType.AccountingCategoryIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxTypeIDNull() {
                return this.IsNull(this.tablePaymentType.TaxTypeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxTypeIDNull() {
                this[this.tablePaymentType.TaxTypeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDefaultNull() {
                return this.IsNull(this.tablePaymentType.IsDefaultColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDefaultNull() {
                this[this.tablePaymentType.IsDefaultColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CurrencyRow : global::System.Data.DataRow {
            
            private CurrencyDataTable tableCurrency;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CurrencyRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCurrency = ((CurrencyDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CurrencyCode {
                get {
                    return ((string)(this[this.tableCurrency.CurrencyCodeColumn]));
                }
                set {
                    this[this.tableCurrency.CurrencyCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CurrencyName {
                get {
                    if (this.IsCurrencyNameNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableCurrency.CurrencyNameColumn]));
                    }
                }
                set {
                    this[this.tableCurrency.CurrencyNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Symbol {
                get {
                    if (this.IsSymbolNull()) {
                        return string.Empty;
                    }
                    else {
                        return ((string)(this[this.tableCurrency.SymbolColumn]));
                    }
                }
                set {
                    this[this.tableCurrency.SymbolColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCurrencyNameNull() {
                return this.IsNull(this.tableCurrency.CurrencyNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCurrencyNameNull() {
                this[this.tableCurrency.CurrencyNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSymbolNull() {
                return this.IsNull(this.tableCurrency.SymbolColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSymbolNull() {
                this[this.tableCurrency.SymbolColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrencyRateRow[] GetCurrencyRateRowsByCurrencyCurrencyRateFrom() {
                if ((this.Table.ChildRelations["CurrencyCurrencyRateFrom"] == null)) {
                    return new CurrencyRateRow[0];
                }
                else {
                    return ((CurrencyRateRow[])(base.GetChildRows(this.Table.ChildRelations["CurrencyCurrencyRateFrom"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrencyRateRow[] GetCurrencyRateRowsByCurrencyCurrencyRateTo() {
                if ((this.Table.ChildRelations["CurrencyCurrencyRateTo"] == null)) {
                    return new CurrencyRateRow[0];
                }
                else {
                    return ((CurrencyRateRow[])(base.GetChildRows(this.Table.ChildRelations["CurrencyCurrencyRateTo"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TaxTypeRow : global::System.Data.DataRow {
            
            private TaxTypeDataTable tableTaxType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TaxTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTaxType = ((TaxTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TaxTypeID {
                get {
                    return ((int)(this[this.tableTaxType.TaxTypeIDColumn]));
                }
                set {
                    this[this.tableTaxType.TaxTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxTypeName {
                get {
                    try {
                        return ((string)(this[this.tableTaxType.TaxTypeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxTypeName\' in table \'TaxType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaxType.TaxTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TaxTypeCode {
                get {
                    try {
                        return ((string)(this[this.tableTaxType.TaxTypeCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TaxTypeCode\' in table \'TaxType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaxType.TaxTypeCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Amount {
                get {
                    try {
                        return ((decimal)(this[this.tableTaxType.AmountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Amount\' in table \'TaxType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTaxType.AmountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxTypeNameNull() {
                return this.IsNull(this.tableTaxType.TaxTypeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxTypeNameNull() {
                this[this.tableTaxType.TaxTypeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTaxTypeCodeNull() {
                return this.IsNull(this.tableTaxType.TaxTypeCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTaxTypeCodeNull() {
                this[this.tableTaxType.TaxTypeCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAmountNull() {
                return this.IsNull(this.tableTaxType.AmountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAmountNull() {
                this[this.tableTaxType.AmountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PaymentDueRow : global::System.Data.DataRow {
            
            private PaymentDueDataTable tablePaymentDue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PaymentDueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePaymentDue = ((PaymentDueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PaymentDueID {
                get {
                    return ((int)(this[this.tablePaymentDue.PaymentDueIDColumn]));
                }
                set {
                    this[this.tablePaymentDue.PaymentDueIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PaymentDueName {
                get {
                    try {
                        return ((string)(this[this.tablePaymentDue.PaymentDueNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PaymentDueName\' in table \'PaymentDue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePaymentDue.PaymentDueNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPaymentDueNameNull() {
                return this.IsNull(this.tablePaymentDue.PaymentDueNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPaymentDueNameNull() {
                this[this.tablePaymentDue.PaymentDueNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AccountingCategoryRow : global::System.Data.DataRow {
            
            private AccountingCategoryDataTable tableAccountingCategory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AccountingCategoryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAccountingCategory = ((AccountingCategoryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AccountingCategoryID {
                get {
                    return ((int)(this[this.tableAccountingCategory.AccountingCategoryIDColumn]));
                }
                set {
                    this[this.tableAccountingCategory.AccountingCategoryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccountingCategoryCode {
                get {
                    try {
                        return ((string)(this[this.tableAccountingCategory.AccountingCategoryCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccountingCategoryCode\' in table \'AccountingCategory\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableAccountingCategory.AccountingCategoryCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AccountingCategoryName {
                get {
                    try {
                        return ((string)(this[this.tableAccountingCategory.AccountingCategoryNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AccountingCategoryName\' in table \'AccountingCategory\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableAccountingCategory.AccountingCategoryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountingCategoryCodeNull() {
                return this.IsNull(this.tableAccountingCategory.AccountingCategoryCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountingCategoryCodeNull() {
                this[this.tableAccountingCategory.AccountingCategoryCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAccountingCategoryNameNull() {
                return this.IsNull(this.tableAccountingCategory.AccountingCategoryNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAccountingCategoryNameNull() {
                this[this.tableAccountingCategory.AccountingCategoryNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ContactCategoryRow : global::System.Data.DataRow {
            
            private ContactCategoryDataTable tableContactCategory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ContactCategoryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableContactCategory = ((ContactCategoryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ContactCategoryID {
                get {
                    return ((int)(this[this.tableContactCategory.ContactCategoryIDColumn]));
                }
                set {
                    this[this.tableContactCategory.ContactCategoryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContactCategoryName {
                get {
                    try {
                        return ((string)(this[this.tableContactCategory.ContactCategoryNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContactCategoryName\' in table \'ContactCategory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContactCategory.ContactCategoryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeleted {
                get {
                    try {
                        return ((bool)(this[this.tableContactCategory.IsDeletedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsDeleted\' in table \'ContactCategory\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableContactCategory.IsDeletedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContactCategoryNameNull() {
                return this.IsNull(this.tableContactCategory.ContactCategoryNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContactCategoryNameNull() {
                this[this.tableContactCategory.ContactCategoryNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsDeletedNull() {
                return this.IsNull(this.tableContactCategory.IsDeletedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsDeletedNull() {
                this[this.tableContactCategory.IsDeletedColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class OptionTypeRow : global::System.Data.DataRow {
            
            private OptionTypeDataTable tableOptionType;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal OptionTypeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableOptionType = ((OptionTypeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OptionTypeID {
                get {
                    return ((int)(this[this.tableOptionType.OptionTypeIDColumn]));
                }
                set {
                    this[this.tableOptionType.OptionTypeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OptionTypeName {
                get {
                    try {
                        return ((string)(this[this.tableOptionType.OptionTypeNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OptionTypeName\' in table \'OptionType\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableOptionType.OptionTypeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Divisor {
                get {
                    if (this.IsDivisorNull()) {
                        return 1;
                    }
                    else {
                        return ((int)(this[this.tableOptionType.DivisorColumn]));
                    }
                }
                set {
                    this[this.tableOptionType.DivisorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOptionTypeNameNull() {
                return this.IsNull(this.tableOptionType.OptionTypeNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOptionTypeNameNull() {
                this[this.tableOptionType.OptionTypeNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDivisorNull() {
                return this.IsNull(this.tableOptionType.DivisorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDivisorNull() {
                this[this.tableOptionType.DivisorColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class FlagRow : global::System.Data.DataRow {
            
            private FlagDataTable tableFlag;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FlagRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFlag = ((FlagDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FlagID {
                get {
                    return ((int)(this[this.tableFlag.FlagIDColumn]));
                }
                set {
                    this[this.tableFlag.FlagIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] FlagImage {
                get {
                    try {
                        return ((byte[])(this[this.tableFlag.FlagImageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FlagImage\' in table \'Flag\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFlag.FlagImageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlagImageNull() {
                return this.IsNull(this.tableFlag.FlagImageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlagImageNull() {
                this[this.tableFlag.FlagImageColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TemplateCategoryRow : global::System.Data.DataRow {
            
            private TemplateCategoryDataTable tableTemplateCategory;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TemplateCategoryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTemplateCategory = ((TemplateCategoryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TemplateCategoryID {
                get {
                    return ((int)(this[this.tableTemplateCategory.TemplateCategoryIDColumn]));
                }
                set {
                    this[this.tableTemplateCategory.TemplateCategoryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TemplateCategoryName {
                get {
                    try {
                        return ((string)(this[this.tableTemplateCategory.TemplateCategoryNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TemplateCategoryName\' in table \'TemplateCategory\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableTemplateCategory.TemplateCategoryNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParentTemplateCategoryID {
                get {
                    try {
                        return ((int)(this[this.tableTemplateCategory.ParentTemplateCategoryIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParentTemplateCategoryID\' in table \'TemplateCategory\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableTemplateCategory.ParentTemplateCategoryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTemplateCategoryNameNull() {
                return this.IsNull(this.tableTemplateCategory.TemplateCategoryNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTemplateCategoryNameNull() {
                this[this.tableTemplateCategory.TemplateCategoryNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParentTemplateCategoryIDNull() {
                return this.IsNull(this.tableTemplateCategory.ParentTemplateCategoryIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParentTemplateCategoryIDNull() {
                this[this.tableTemplateCategory.ParentTemplateCategoryIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateRow[] GetTemplateRows() {
                if ((this.Table.ChildRelations["TemplateCategory_Template"] == null)) {
                    return new TemplateRow[0];
                }
                else {
                    return ((TemplateRow[])(base.GetChildRows(this.Table.ChildRelations["TemplateCategory_Template"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TemplateRow : global::System.Data.DataRow {
            
            private TemplateDataTable tableTemplate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TemplateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTemplate = ((TemplateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TemplateID {
                get {
                    return ((int)(this[this.tableTemplate.TemplateIDColumn]));
                }
                set {
                    this[this.tableTemplate.TemplateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TemplateName {
                get {
                    return ((string)(this[this.tableTemplate.TemplateNameColumn]));
                }
                set {
                    this[this.tableTemplate.TemplateNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FilePath {
                get {
                    try {
                        return ((string)(this[this.tableTemplate.FilePathColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FilePath\' in table \'Template\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplate.FilePathColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParentTemplateCategoryID {
                get {
                    try {
                        return ((int)(this[this.tableTemplate.ParentTemplateCategoryIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParentTemplateCategoryID\' in table \'Template\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTemplate.ParentTemplateCategoryIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateCategoryRow TemplateCategoryRow {
                get {
                    return ((TemplateCategoryRow)(this.GetParentRow(this.Table.ParentRelations["TemplateCategory_Template"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TemplateCategory_Template"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFilePathNull() {
                return this.IsNull(this.tableTemplate.FilePathColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFilePathNull() {
                this[this.tableTemplate.FilePathColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParentTemplateCategoryIDNull() {
                return this.IsNull(this.tableTemplate.ParentTemplateCategoryIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParentTemplateCategoryIDNull() {
                this[this.tableTemplate.ParentTemplateCategoryIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CurrencyRateRow : global::System.Data.DataRow {
            
            private CurrencyRateDataTable tableCurrencyRate;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CurrencyRateRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCurrencyRate = ((CurrencyRateDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CurrencyRateID {
                get {
                    return ((int)(this[this.tableCurrencyRate.CurrencyRateIDColumn]));
                }
                set {
                    this[this.tableCurrencyRate.CurrencyRateIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CurrencyCodeFrom {
                get {
                    return ((string)(this[this.tableCurrencyRate.CurrencyCodeFromColumn]));
                }
                set {
                    this[this.tableCurrencyRate.CurrencyCodeFromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CurrencyCodeTo {
                get {
                    return ((string)(this[this.tableCurrencyRate.CurrencyCodeToColumn]));
                }
                set {
                    this[this.tableCurrencyRate.CurrencyCodeToColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CurrencyRateDate {
                get {
                    return ((global::System.DateTime)(this[this.tableCurrencyRate.CurrencyRateDateColumn]));
                }
                set {
                    this[this.tableCurrencyRate.CurrencyRateDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ActualRate {
                get {
                    try {
                        return ((decimal)(this[this.tableCurrencyRate.ActualRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ActualRate\' in table \'CurrencyRate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCurrencyRate.ActualRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal ForecastRate {
                get {
                    try {
                        return ((decimal)(this[this.tableCurrencyRate.ForecastRateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ForecastRate\' in table \'CurrencyRate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCurrencyRate.ForecastRateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ForecastDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableCurrencyRate.ForecastDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ForecastDate\' in table \'CurrencyRate\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableCurrencyRate.ForecastDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrencyRow CurrencyRowByCurrencyCurrencyRateFrom {
                get {
                    return ((CurrencyRow)(this.GetParentRow(this.Table.ParentRelations["CurrencyCurrencyRateFrom"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CurrencyCurrencyRateFrom"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrencyRow CurrencyRowByCurrencyCurrencyRateTo {
                get {
                    return ((CurrencyRow)(this.GetParentRow(this.Table.ParentRelations["CurrencyCurrencyRateTo"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["CurrencyCurrencyRateTo"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActualRateNull() {
                return this.IsNull(this.tableCurrencyRate.ActualRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetActualRateNull() {
                this[this.tableCurrencyRate.ActualRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsForecastRateNull() {
                return this.IsNull(this.tableCurrencyRate.ForecastRateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetForecastRateNull() {
                this[this.tableCurrencyRate.ForecastRateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsForecastDateNull() {
                return this.IsNull(this.tableCurrencyRate.ForecastDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetForecastDateNull() {
                this[this.tableCurrencyRate.ForecastDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServiceTypeRowChangeEvent : global::System.EventArgs {
            
            private ServiceTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceTypeRowChangeEvent(ServiceTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GradeRowChangeEvent : global::System.EventArgs {
            
            private GradeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GradeRowChangeEvent(GradeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GradeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class GradeExternalRowChangeEvent : global::System.EventArgs {
            
            private GradeExternalRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GradeExternalRowChangeEvent(GradeExternalRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public GradeExternalRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CreditCardRowChangeEvent : global::System.EventArgs {
            
            private CreditCardRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CreditCardRowChangeEvent(CreditCardRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CreditCardRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CountryRowChangeEvent : global::System.EventArgs {
            
            private CountryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRowChangeEvent(CountryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CountryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class StateRowChangeEvent : global::System.EventArgs {
            
            private StateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateRowChangeEvent(StateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RegionRowChangeEvent : global::System.EventArgs {
            
            private RegionRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegionRowChangeEvent(RegionRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RegionRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CityRowChangeEvent : global::System.EventArgs {
            
            private CityRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CityRowChangeEvent(CityRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CityRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ServiceConfigTypeRowChangeEvent : global::System.EventArgs {
            
            private ServiceConfigTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceConfigTypeRowChangeEvent(ServiceConfigTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServiceConfigTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AgeGroupRowChangeEvent : global::System.EventArgs {
            
            private AgeGroupRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AgeGroupRowChangeEvent(AgeGroupRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AgeGroupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ItineraryStatusRowChangeEvent : global::System.EventArgs {
            
            private ItineraryStatusRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItineraryStatusRowChangeEvent(ItineraryStatusRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItineraryStatusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RequestStatusRowChangeEvent : global::System.EventArgs {
            
            private RequestStatusRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestStatusRowChangeEvent(RequestStatusRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestStatusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UserRowChangeEvent : global::System.EventArgs {
            
            private UserRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRowChangeEvent(UserRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class BranchRowChangeEvent : global::System.EventArgs {
            
            private BranchRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BranchRowChangeEvent(BranchRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public BranchRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DepartmentRowChangeEvent : global::System.EventArgs {
            
            private DepartmentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentRowChangeEvent(DepartmentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DepartmentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ItinerarySourceRowChangeEvent : global::System.EventArgs {
            
            private ItinerarySourceRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItinerarySourceRowChangeEvent(ItinerarySourceRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ItinerarySourceRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AppSettingsRowChangeEvent : global::System.EventArgs {
            
            private AppSettingsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AppSettingsRowChangeEvent(AppSettingsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AppSettingsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AgentRowChangeEvent : global::System.EventArgs {
            
            private AgentRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AgentRowChangeEvent(AgentRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AgentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SupplierConfigTypeRowChangeEvent : global::System.EventArgs {
            
            private SupplierConfigTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SupplierConfigTypeRowChangeEvent(SupplierConfigTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SupplierConfigTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MenuTypeRowChangeEvent : global::System.EventArgs {
            
            private MenuTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MenuTypeRowChangeEvent(MenuTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MenuTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PaymentTypeRowChangeEvent : global::System.EventArgs {
            
            private PaymentTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentTypeRowChangeEvent(PaymentTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CurrencyRowChangeEvent : global::System.EventArgs {
            
            private CurrencyRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrencyRowChangeEvent(CurrencyRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrencyRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TaxTypeRowChangeEvent : global::System.EventArgs {
            
            private TaxTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxTypeRowChangeEvent(TaxTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TaxTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PaymentDueRowChangeEvent : global::System.EventArgs {
            
            private PaymentDueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentDueRowChangeEvent(PaymentDueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PaymentDueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AccountingCategoryRowChangeEvent : global::System.EventArgs {
            
            private AccountingCategoryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountingCategoryRowChangeEvent(AccountingCategoryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AccountingCategoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ContactCategoryRowChangeEvent : global::System.EventArgs {
            
            private ContactCategoryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContactCategoryRowChangeEvent(ContactCategoryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ContactCategoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class OptionTypeRowChangeEvent : global::System.EventArgs {
            
            private OptionTypeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OptionTypeRowChangeEvent(OptionTypeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public OptionTypeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class FlagRowChangeEvent : global::System.EventArgs {
            
            private FlagRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlagRowChangeEvent(FlagRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FlagRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TemplateCategoryRowChangeEvent : global::System.EventArgs {
            
            private TemplateCategoryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateCategoryRowChangeEvent(TemplateCategoryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateCategoryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TemplateRowChangeEvent : global::System.EventArgs {
            
            private TemplateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateRowChangeEvent(TemplateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TemplateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CurrencyRateRowChangeEvent : global::System.EventArgs {
            
            private CurrencyRateRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrencyRateRowChangeEvent(CurrencyRateRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CurrencyRateRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591